{
  "openapi": "3.1.0",
  "info": {
    "title": "Legacy Data Gateway",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8092/ldg/",
      "variables": {
        "basePath": {
          "default": "/"
        }
      }
    },
    {
      "url": "https://services.{env}.sycle.com/ldg/",
      "variables": {
        "basePath": {
          "default": "/"
        },
        "env": {
          "default": "env",
          "enum": ["na01", "dev01", "dev02", "stg01"]
        }
      }
    }
  ],
  "paths": {
    "/clinical-tests/{patientId}": {
      "get": {
        "summary": "Show Clinical Test",
        "description": "Returns a Clinical Test",
        "operationId": "clinicalTestShow",
        "tags": ["Clinical Test"],
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "style": "simple",
            "description": "Patient UUID identifier for tests you want to look up.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "allowEmptyValue": false,
              "example": "354b2beb-3c4e-4aa6-ace8-dbcf661ab46e"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "Request any of the available test types to be included in the response testData",
            "example": "dtcAudiogram,summaryL,summaryR",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "dtcAudiogram",
                  "summaryL",
                  "summaryR",
                  "dtcImpedanceL",
                  "dtcImpedanceR"
                ],
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "testDate",
            "description": "The test date for the hearing tests you want to load. To load a set of clinical tests for a particular session,\nyou must provide a validate date if an appointment is not specified for the tests along with the\npatient identifier.\n",
            "example": "2003-11-30",
            "schema": {
              "type": "string",
              "description": "A date. format Y-m-d"
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "appointmentUuid",
            "style": "form",
            "explode": false,
            "description": "Appointment UUID identifier for tests you want to look up,\nyou must provide a validate date if a date is not specified for the tests along with the patient identifier.\n",
            "example": "354b2beb-3c4e-4aa6-ace8-dbcf661ab46e",
            "schema": {
              "type": "string",
              "format": "uuid",
              "allowEmptyValue": false,
              "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful show response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Clinical Test Response Objects for a patient",
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "A collection of Clinical Test",
                      "items": {
                        "allOf": [
                          {
                            "type": "array",
                            "description": "Clinical Tests for a patient.",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "title": "HIMSAAudiometricStandard",
                                  "properties": {
                                    "HIMSAAudiometricStandard": {
                                      "type": "object",
                                      "title": "HIMSAAudiometricStandard",
                                      "description": "This HIMSAAudiometricStandard is modeled after the HIMSA Audiogram 500 Data Standards. see https://himsafiles.com/DataStandards/DataStandards/Aud/500/Audiogram500rev6.html",
                                      "properties": {
                                        "ToneThresholdAudiogram": {
                                          "type": "array",
                                          "maxItems": 18,
                                          "description": "ToneThresholdAudiogram\n\nStandard Tone Hearing Threshold (THR) Audiogram. This is the basic audiogram for\nrecording the patient’s Hearing Threshold Level (HTL).\n\nMethod: Presentation of Pure tone stimulus via transducer. Masking in the opposite ear is\nfrequently used. Threshold is defined as the 50% response level (softest level at which\npatient responds to tone 50% of the time).\n\nNote that the max. 24 curve points can come in any order as [frequency, intensity] pairs.\nEach point is properly identified by its standard frequency for which the intensity is\nrecorded.\n\nRef. [HOCA-5, Chapter 5, page 71: Puretone Evaluation ]\n\nTToneTHRAudiogram\n",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "AudMeasurementConditions": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions"
                                              },
                                              "TonePoints": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/TonePoints"
                                              }
                                            }
                                          }
                                        },
                                        "UncomfortableLevel": {
                                          "type": "array",
                                          "maxItems": 18,
                                          "description": "Uncomfortable Level Audiogram\n\nThe lowest signal level, in each ear, which is judged to be uncomfortably loud by the patient. The measurement is usually done with pure tones at audiometric frequencies but may be performed using speech-weighted noise; the signal level has to be expressed relative to a reference value, e.g. as hearing level.\n\nNote that the max. 24 curve points can come in any order as [frequency, intensity] pairs.\nEach point is properly identified by its standard frequency for which the intensity is\nrecorded.\n\nRef. [HOCA-5, Chapter 5, page 71: Puretone Evaluation]\n",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "AudMeasurementConditions": {
                                                "type": "object",
                                                "title": "AudioMetricMeasurementConditions_Type",
                                                "description": "Global Element used throughout this standard - see AudioMetricMeasurementConditions_Type for more details\n\nThe same set of measurement conditions are used for all Audiogram curves.\nThe Audiogram measurement conditions are very versatile and expandable in such a way that whenever new measurement methods are discovered they can be added to the existing ones.\n\nThey are meant to be used both by the ENT (Ear, Nose, Throat) for diagnostics purposes and for fitting hearing instruments as well. It is very important to realize that combinations of measurement conditions that make perfect sense to the ENT can be meaningless when programming hearing instruments. It is therefore important to examine all measurement conditions to ascertain whether they are useful for the intended purpose.\n",
                                                "properties": {
                                                  "StimulusSignalType": {
                                                    "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions/properties/MaskingSignalType"
                                                  },
                                                  "MaskingSignalType": {
                                                    "type": "string",
                                                    "title": "Signal_Type",
                                                    "description": "AuxiliarySignal / Stimulus from Compact Disc or Audio Tape Microphone / Live voice from microphone",
                                                    "enum": [
                                                      "Unknown",
                                                      "NoSignalApplied",
                                                      "PureTone",
                                                      "Warble",
                                                      "NarrowBandNoise",
                                                      "SpeechNoise",
                                                      "WhiteNoise",
                                                      "PinkNoise",
                                                      "AuxiliarySignal",
                                                      "Microphone",
                                                      "User1",
                                                      "User2",
                                                      "User3"
                                                    ],
                                                    "example": "PureTone",
                                                    "default": "NoSignalApplied"
                                                  },
                                                  "StimulusSignalOutput": {
                                                    "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions/properties/MaskingSignalOutput"
                                                  },
                                                  "MaskingSignalOutput": {
                                                    "type": "string",
                                                    "title": "SignalOutput_Type",
                                                    "description": "The Signal Output Type is of extra importance. It defines the means of presenting sound to the patient:\n\n+ Air Conductor / headphones (Also just called Phones)\n+ Bone conductor / vibrator placed on the mastoid (HOCA-5 page 10)\n+ Free Field / Loudspeakers in a special test room\n+ Insert Phone / small foam tips used to deliver air conduction test.\n\nIt also defines which side (i.e. the persons left or right ear) is stimulated.\n\n**Insert Phone and Air Conduction use the same symbol types to denote a point on the audiogram**. Insert Phones\nis different than Phones in that Phones is an over the ear signal (headphones), and Insert Phones inserts the\ntransducer into the ear canal.\n",
                                                    "enum": [
                                                      "Unknown",
                                                      "NoSignalOutput",
                                                      "AirConductorLeft",
                                                      "AirConductorRight",
                                                      "AirConductorBinaural",
                                                      "BoneConductorLeft",
                                                      "BoneConductorRight",
                                                      "BoneConductorBinaural",
                                                      "FreeFieldLeft",
                                                      "FreeFieldRight",
                                                      "FreeFieldBinaural",
                                                      "InsertPhoneLeft",
                                                      "InsertPhoneRight",
                                                      "InsertPhoneBinaural",
                                                      "User1",
                                                      "User2",
                                                      "User3"
                                                    ],
                                                    "example": "AirConductorLeft",
                                                    "default": "NoSignalOutput"
                                                  },
                                                  "StimulusdBWeighting": {
                                                    "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions/properties/MaskingdBWeighting"
                                                  },
                                                  "MaskingdBWeighting": {
                                                    "type": "string",
                                                    "title": "dBweighting_Type",
                                                    "description": "The decibel scale is used to measure the level of sound presented to the ears relative to a reference point. The decibel scales express a ratio between two numbers these are converted to a logarithmic scale. As this is a ratio we must have a reference level - you cannot say the sound is 10 times bigger if you do not state what it is bigger than. This reference point varies between different dB scales.\n\nFor example dBSPL uses audiometric zero as it's reference point which is measured in Pascals and is the minimum pressure required to cause the sensation of hearing in the mid frequency region, (0,0002Pa). There are a number of different scales to use when measuring hearing thresholds on all of which use decibels with different reference points.\n\nThe stimulus dB weighting is used to determine how much correction is required so that the audiometer dials read accurately for the chosen measurement scale. This will vary between tests e.g. dBSPL and dBHL measurements will have different dB weightings.\n\nABS / Absolute Value of a measurement without any corrections\nCSL / Comfortable Speech Level.  According to ISO standard.\n\nEnumerated Value HTL has been changed to HL\n",
                                                    "enum": [
                                                      "Unknown",
                                                      "NodBWeighting",
                                                      "HL",
                                                      "SPL",
                                                      "ABS",
                                                      "CSL",
                                                      "User1",
                                                      "User2",
                                                      "User3"
                                                    ],
                                                    "example": "HL",
                                                    "default": "NodBWeighting"
                                                  },
                                                  "StimulusPresentationType": {
                                                    "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions/properties/MaskingPresentationType"
                                                  },
                                                  "MaskingPresentationType": {
                                                    "type": "string",
                                                    "title": "Presentation_Type",
                                                    "description": "Presentation is done in a number of different ways. In some tests the stimulus is always on (i.e. using the continuous presentation type)- (e.g. Tone Decay presents a continuous pure tone signal.)\n\n  Some of the stimulus types in this section are specific to diagnostic tests such as:\n  + SISI ./ Short Increment Sensitivity Index\n  + Alternating / usually used with ABLB testing (Alternate Binaural Loudness balance)\n  + Amplitude Modulated / used in Bekesey Audiometry (automatic)\n  + StepWiseFrequencyModulated / often called ‘warble tones’ can be used in free field testing\n  + Impulse / Random pulses\n  + Pulsed Presentation / Used in Bekesey Audiometry (automatic) and can be used as part of pure tone audiometry to make it easier for patients to distinguish stimulus sound\n",
                                                    "enum": [
                                                      "Unknown",
                                                      "NoPresentationType",
                                                      "Continuous",
                                                      "PulsedPresentation",
                                                      "Alternating",
                                                      "AmplitudeModulated",
                                                      "StepwiseFrequencyModulated",
                                                      "Impulse",
                                                      "SiSiSignal",
                                                      "User1",
                                                      "User2",
                                                      "User3"
                                                    ],
                                                    "example": "Continuous",
                                                    "default": "NoPresentationType"
                                                  },
                                                  "StimulusTransducerType": {
                                                    "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions/properties/MaskingTransducerType"
                                                  },
                                                  "MaskingTransducerType": {
                                                    "type": "string",
                                                    "title": "Transducer_Type",
                                                    "description": "The device used to deliver sound (e.g. type of headphone TDH39)\nA simple explanation for each type of device is provided below:\n+ TDH39 / Supra aural headphones for air conduction tests\n+ HDA200 / Supra aural headphones often used for extended high frequency air conduction testing\n+ EarTone 3A / Insert earphones\n+ DT48 / Supra aural headphones for air conduction tests\n+ TDH49 /  Supra aural headphones for air conduction tests\n+ B71 / Bone Conductor\n+ B72 / Bone conductor\n+ Beoton / specific set of headphones used with Beoton audiometers only\n+ Holmberg / Supra aural headphones for air conduction tests usually used in noisier environments\n",
                                                    "enum": [
                                                      "Unknown",
                                                      "NoTransducerType",
                                                      "TDH39",
                                                      "HDA200",
                                                      "EARTONE3A",
                                                      "DT48",
                                                      "TDH49",
                                                      "B71",
                                                      "B72",
                                                      "Beoton",
                                                      "Holmberg",
                                                      "User1",
                                                      "User2",
                                                      "User3"
                                                    ],
                                                    "example": "HDA200",
                                                    "default": "NoTransducerType"
                                                  },
                                                  "TransducerDescription": {
                                                    "type": "string",
                                                    "maxLength": 16,
                                                    "title": "TransducerDescription",
                                                    "description": "Optional description of the Transducer",
                                                    "default": ""
                                                  },
                                                  "HearingInstrument_1_Condition": {
                                                    "type": "string",
                                                    "title": "HearingInstrumentCondition_Type",
                                                    "description": "The Hearing Instrument Condition Type indicates whether the patient wore a Hearing Instrument during the measurement. The NOAH 3.0 Audiogram Module specification allows a user to specify both an Aided1 and an Aided2 condition to differentiate between tests with two different types of Hearing Instruments. This scenario may mean that the user enters data in an Aided2 field without corresponding information on the Aided1 test condition.\n\nTHICondition\n",
                                                    "enum": [
                                                      "Unknown",
                                                      "NoCondition",
                                                      "UnAided",
                                                      "Aided1",
                                                      "Aided2",
                                                      "User1",
                                                      "User2",
                                                      "User3"
                                                    ],
                                                    "example": "UnAided",
                                                    "default": "NoCondition"
                                                  },
                                                  "HearingInstrument_2_Condition": {
                                                    "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions/properties/HearingInstrument_1_Condition"
                                                  },
                                                  "StimulusAuxiliary": {
                                                    "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions/properties/MaskingAuxiliary"
                                                  },
                                                  "MaskingAuxiliary": {
                                                    "type": "object",
                                                    "title": "AuxiliaryParameter_Type",
                                                    "description": "Typically used with speech testing\n\nTypes of word list used to carry out speech testing. Some are used for speech discrimination testing but others are there for more specific tests of speech understanding in noise for example. This does not define the actual word list used by name just by the type\n",
                                                    "enum": [
                                                      "Unknown",
                                                      "NoAuxiliaryParameter",
                                                      "MonoSyllabicWords",
                                                      "MultiSyllabicWords",
                                                      "DichoticWords",
                                                      "Freiburger",
                                                      "Reim",
                                                      "Numerals",
                                                      "SpondaicWords",
                                                      "ConversationalSpeech",
                                                      "PhoneticallyBalanced",
                                                      "SentenceMaterial",
                                                      "BodyParts",
                                                      "User1",
                                                      "User2",
                                                      "User3"
                                                    ],
                                                    "example": "MonoSyllabicWords",
                                                    "default": "NoAuxiliaryParameter"
                                                  },
                                                  "SpeechThresholdType": {
                                                    "type": "string",
                                                    "title": "SpeechThreshold_Type",
                                                    "description": "This enumerated type is used for speech testing to determine if the test used is of type SAT, SDT or SRT. Speech is used as the stimulus in these tests.\n\n+SRT - Speech recognition threshold test / The level at which 50% correct score is obtained when patients are asked to repeat a spondaic word list.  - Spondaic words are 2 syllable words with equal stress on each syllable.( e.g. Birthday)\n\n+SDT - Speech Detection threshold test / A single word is presented repeatedly and the intensity is increased in 5dB steps and decreased in 10dB steps (like pure tone audiometry) until the point where the patient indicates they can detect, but not repeat the speech heard. Threshold (again like pure tone audiometry) is taken as the level where the patient responds 2 out of 3 or 2 out of 4 times.\n\n+SAT Speech Awareness Threshold Test / Same Description as of SDT\n",
                                                    "enum": [
                                                      "Unknown",
                                                      "NotUsed",
                                                      "SRT",
                                                      "SDT",
                                                      "SAT"
                                                    ],
                                                    "example": "SRT",
                                                    "default": "NotUsed"
                                                  }
                                                }
                                              },
                                              "TonePoints": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "title": "TonePoints_Type",
                                                  "properties": {
                                                    "StimulusFrequency": {
                                                      "type": "integer",
                                                      "description": "Frequency of the stimulus channel in Hz",
                                                      "example": 250,
                                                      "minimum": 125,
                                                      "maximum": 16000
                                                    },
                                                    "StimulusLevel": {
                                                      "type": "integer",
                                                      "description": "Stimulus Level of the stimulus channel in dB",
                                                      "example": 10
                                                    },
                                                    "MaskingFrequency": {
                                                      "type": "integer",
                                                      "description": "Frequency of the masking channel in Hz.",
                                                      "example": 250,
                                                      "minimum": 125,
                                                      "maximum": 16000
                                                    },
                                                    "TonePointStatus": {
                                                      "type": "string",
                                                      "title": "PointStatus_Type",
                                                      "description": "Status of the point",
                                                      "enum": [
                                                        "Unknown",
                                                        "Normal",
                                                        "AlwaysResponse",
                                                        "NoResponse",
                                                        "NotMeasurable",
                                                        "DidNotTest",
                                                        "CouldNotTest",
                                                        "User1",
                                                        "User2",
                                                        "User3"
                                                      ],
                                                      "example": "Normal"
                                                    }
                                                  }
                                                },
                                                "maxItems": 24
                                              }
                                            }
                                          }
                                        },
                                        "MostComfortableLevel": {
                                          "type": "array",
                                          "maxItems": 18,
                                          "description": "Most Comfortable Level (MCL) Audiogram\n\nThis is an area within the residual hearing in which sounds are perceived as comfortable by the patient.\nTones presented during this test are pure tones and the patient is asked to respond when they find the sound comfortable. Generally audiologists now try to test to find this area of hearing by concentrating on finding the upper and lower levels of comfort.\n\nNote that the max. 24 curve points can come in any order as [frequency, intensity] pairs.\nEach point is properly identified by its standard frequency for which the intensity is\nrecorded.\n\nRef. [HOCA-5, Chapter 5, page 71: Puretone Evaluation]\n",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "AudMeasurementConditions": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions"
                                              },
                                              "TonePoints": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/TonePoints"
                                              }
                                            }
                                          }
                                        },
                                        "SpeechDiscriminationAudiogram": {
                                          "type": "array",
                                          "maxItems": 12,
                                          "description": "# AKA Word Recognition\nSpeech Discrimination is tested by having the speaker present a one syllable word, usually with a lead in sentence such as ’say the word..’ in lists of 25 or 50, which the listener repeats. These lists are standardized and weighted using all of the speech sounds heard in the chosen language. The percentage of words the listener repeats correctly is the discrimination score. The percentage correct is influenced by the type and degree of hearing loss present. This audiogram plots the results of this test against hearing level\n\nRef. [HOCA-5, Chapter 5, page 71: Speech Audiometry]\n\nNote for individuals familiar with earlier versions of this data standard:\nIn previous versions of this standard this Audiogram was documented as a discrimination loss audiogram.  The documentation implied that the score would represent the loss not the score.  However, this description was in conflict with the definition of the percent score.  To correct this documentation error HIMSA has changed the name and description.\n",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "AudMeasurementConditions": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions"
                                              },
                                              "SpeechDiscriminationPoints": {
                                                "type": "array",
                                                "maxItems": 24,
                                                "items": {
                                                  "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/SpeechUncomfortableLevel/items/properties/SpeechUncomfortablePoint"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "SpeechReceptionThresholdAudiogram": {
                                          "type": "array",
                                          "maxItems": 12,
                                          "description": "# AKA Speech Audiometry\n\nStucture for SRT, SDT, and SAT tests\n\nSRT - Speech Reception Threshold Audiogram The SRT is also defined as the Threshold\nof Intelligibility (TI). It is defined as the presentation level (in dB HL) necessary for the\npatient to reach a score of 50 % when presented for a series of easily understandable\nphonemes. The SRT can be compared with the tone audiometry thresholds at the\nfrequencies [500, 100, 2000] Hz.\n\nThe SRT measurement can be carried out as a validation of the Tone Threshold Audiogram.\n\nSDT - Speech Detection threshold test / A single word is presented repeatedly and the intensity is increased in 5dB steps and decreased in 10dB steps (like pure tone audiometry) until the point where the patient indicates they can detect, but not repeat the speech heard. Threshold (again like pure tone audiometry) is taken as the level where the patient responds 2 out of 3 or 2 out of 4 times.\n\nSAT - Speech Awareness Threshold Test / Same Description as of SDT\n\nSet SpeechThreshold_Type to indicate the type of test\n\nRef. [HOCA-5, Chapter 7, page 96: Speech Audiometry]\nRef. [HOCA-5, Chapter 32, page 584: Pseudohypacusis]\n",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "AudMeasurementConditions": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions"
                                              },
                                              "SpeechReceptionPoints": {
                                                "type": "array",
                                                "items": {
                                                  "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/SpeechUncomfortableLevel/items/properties/SpeechUncomfortablePoint"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "SpeechMostComfortableLevel": {
                                          "type": "array",
                                          "description": "Speech Most Comfortable Level (MCL) Audiogram. Measurement of Discrimination\nLoss is done at Most Comfortable Loudness for the patient, normally 30-40 dB above the\nSpeech Reception Threshold (SRT).\n\nSome patients might find this level too high (recruitment present). This may make it\ndifficult to find the correct level for recording the MCL speech audiogram. In such cases a\ncomplete speech audiogram curve should be recorded.  NOTE: only the very MCL point of the speech audiogram can be saved.\n\nRef. [HOCA-5, Chapter 7, page 96: Speech Audiometry]\n",
                                          "maxItems": 12,
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "AudMeasurementConditions": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions"
                                              },
                                              "SpeechMostComfortablePoint": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/SpeechUncomfortableLevel/items/properties/SpeechUncomfortablePoint"
                                              }
                                            }
                                          }
                                        },
                                        "SpeechUncomfortableLevel": {
                                          "type": "array",
                                          "description": "Speech UnComfortable Level (UCL) Audiogram. The SRT, MCL and UCL for speech\naudiograms are saved as a single intensity value.\n\nA complete speech audiogram curve would show the whole range from Speech Reception Threshold\n(SRT), to Most Comfortable Level (MCL) to Uncomfortable Level (UCL)\n\nRef. [HOCA-5, Chapter 7, page 96: Speech Audiometry]\n",
                                          "maxItems": 12,
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "AudMeasurementConditions": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/UncomfortableLevel/items/properties/AudMeasurementConditions"
                                              },
                                              "SpeechUncomfortablePoint": {
                                                "type": "object",
                                                "title": "SpeechScorePoint_Type",
                                                "properties": {
                                                  "StimulusLevel": {
                                                    "type": "integer",
                                                    "description": "Stimulus Level of the stimulus channel in dB",
                                                    "example": 40,
                                                    "nullable": true
                                                  },
                                                  "MaskingLevel": {
                                                    "type": "integer",
                                                    "description": "Masking Level of the stimulus channel in dB",
                                                    "example": 40,
                                                    "nullable": true
                                                  },
                                                  "ScorePercent": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "description": "The number of correct repeated phonemes (words, syllables…) in percent",
                                                    "example": 37,
                                                    "nullable": true
                                                  },
                                                  "NumberOfWords": {
                                                    "type": "integer",
                                                    "description": "The number of correctly repeated phonemes (words, syllables…)",
                                                    "example": 20,
                                                    "nullable": true
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "FrequenciesUsedForToneAverage": {
                                          "type": "object",
                                          "description": "This structure allows specification of certain frequencies at which the pure tone average should be calculated. Each ear has two average values to allow for “double-weighting” of certain values as required in certain countries like Japan.\n\nThe average calculation method is applied to all averages for the given ear, so there is no\nopportunity to specify a different pure tone average calculation method for bone\nconduction than is used for air conduction, etc.\n\nThe rationale behind only a single set of information for each of left and right ears is that it\nreally does not make sense to calculate the average differently between two different tests.\n\nA note on the double weighting: Essentially, if the set specifies to weight averages at\n500,1000,1500 Hz and the second specifies 1000 Hz, then the average would be calculated\nas follows:\n\n(ValueAt(500) + (2 * ValueAt(1000)) + ValueAt(1500)) / 4\n\nIf the ValueAt(1000) for the left ear is maybe unreliable, a better average is sought for\nthat ear but you can still leave the right ear calculation unchanged.\n\nRef. [HOCA-5, Chapter 5, page 71: Puretone Evaluation ]\n",
                                          "properties": {
                                            "LeftEar1": {
                                              "type": "array",
                                              "maxItems": 13,
                                              "description": "Frequencies used to calculate the average for LeftEar1",
                                              "example": [100, 250, 1000],
                                              "nullable": true,
                                              "items": {
                                                "type": "integer",
                                                "description": "Frequencies used to calculate the average for selected ear",
                                                "enum": [
                                                  125, 250, 500, 750, 1000,
                                                  1500, 2000, 3000, 4000, 6000,
                                                  8000, 12000, 16000
                                                ],
                                                "example": 1000,
                                                "maxItems": 13
                                              }
                                            },
                                            "LeftEar2": {
                                              "type": "array",
                                              "maxItems": 13,
                                              "description": "Frequencies used to calculate the average for LeftEar2",
                                              "example": [100, 250, 1000],
                                              "nullable": true,
                                              "items": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/FrequenciesUsedForToneAverage/properties/LeftEar1/items"
                                              }
                                            },
                                            "RightEar1": {
                                              "type": "array",
                                              "maxItems": 13,
                                              "description": "Frequencies used to calculate the average for RightEar1",
                                              "example": [100, 250, 1000],
                                              "nullable": true,
                                              "items": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/FrequenciesUsedForToneAverage/properties/LeftEar1/items"
                                              }
                                            },
                                            "RightEar2": {
                                              "type": "array",
                                              "maxItems": 13,
                                              "description": "Frequencies used to calculate the average for RightEar2",
                                              "example": [100, 250, 1000],
                                              "nullable": true,
                                              "items": {
                                                "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/0/properties/HIMSAAudiometricStandard/properties/FrequenciesUsedForToneAverage/properties/LeftEar1/items"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "title": "HeatingLossDataStandard",
                                    "properties": {
                                      "HeatingLossDataStandard": {
                                        "type": "object",
                                        "title": "HearingLossDataStandard",
                                        "description": "This is not a HIMSA data standard, but a sycle defined data standard based on the degrees of hearing loss data.\nEach ear is represented independently in this data standard..\n",
                                        "properties": {
                                          "ear": {
                                            "type": "string",
                                            "descrption": "Which ear the test was in",
                                            "enum": ["right", "left"],
                                            "example": "right"
                                          },
                                          "didNotTest": {
                                            "type": "boolean",
                                            "description": "Indicates if this ear was tested or not.",
                                            "example": false,
                                            "nullable": false
                                          },
                                          "lossLevel": {
                                            "type": "string",
                                            "description": "Degree of hearing loss refers to the severity of the loss. ",
                                            "enum": [
                                              "No Loss",
                                              "Mild",
                                              "Mild/Moderate",
                                              "Moderate",
                                              "Moderate/Severe",
                                              "Severe",
                                              "Severe/Profound",
                                              "Profound",
                                              "Unaidable"
                                            ],
                                            "example": "Mild",
                                            "default": "No Loss"
                                          },
                                          "lossType": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "There are three basic types of hearing loss: conductive, sensorineural, and mixed.",
                                            "enum": [
                                              "Conductive",
                                              "Sensorineural",
                                              "Mixed",
                                              "Other"
                                            ],
                                            "example": "Mixed",
                                            "default": "Other"
                                          },
                                          "lossShape": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "Shape of hearing loss",
                                            "enum": [
                                              "ReverseSlope",
                                              "CookieBite",
                                              "HighFrequency",
                                              "Flat",
                                              "Sloping",
                                              "None"
                                            ],
                                            "example": "Flat",
                                            "default": "None"
                                          },
                                          "manualPureToneAverage": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "User added pure tone average. Less accurate than PTA calculated from tonepoints",
                                            "example": "68",
                                            "default": ""
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "title": "AcousticImmittanceAssessment",
                                    "properties": {
                                      "AcousticImmittanceAssessment": {
                                        "type": "object",
                                        "title": "AcousticImmittanceAssessment",
                                        "description": "Admittance / Immittance / Impedance are used interchangeably in the audiometry world for the same tests.\n\nThis data format was defined based on the Admittance HIMSA 501 Data Standard. See https://himsafiles.com/DataStandards/DataStandards/IMP/Admittance501html/Admittance-15-16-501rev4.html\n",
                                        "properties": {
                                          "TympanogramTest": {
                                            "type": "array",
                                            "title": "Tympanograms",
                                            "description": "Tympanograms\n\nThe mobility of the ear drum and the middle ear is recorded while the air\npressure in the auditory canal is varied, typically in the interval of\n[-300 .. +200] daPa .\n\n+ Unit for Pressure [p]ı / The unit chosen for pressure is deka Pascal (daPa) or tens of Pascal.\n1 daPa approximates 1 mm Water. Ref. [Van Camp].\n\n\t\t[p] = daPa dekaPascal or tens of Pascals.\n\n+ resFreq / Ear Resonance Frequency. This field is intended for future use in Noah.\nIf the probe frequency is swept in an interval of e.g. [200..2kHz], a\nresonance frequency can be found near 1000 Hz. Below this frequency the\near is stiffness controlled, and above this frequency it is mass controlled.\n\n+ Maximum Mobility point i.e.Max\n Point / For the well-functioning normal middle ear a point of \"maximum mobility\" will be found, often for a slightly negative pressure [-100..0 ] daPa.\n\n+ Middle Ear Acoustic Impedance and Admittance / The mobility of the ear drum and the middle ear is in short named \"Middle Ear acoustic Immitance\", which can mean Acoustic Impedance, Za\nor Acoustic Admittance Ya where pr. definition\n\n\t\t__1__\n\t\tZa = Ya The subscript a for acoustic is omitted hereafter.\n\n+ Unit for Acoustic Admittance [Y] / For practical reasons the Admittance Y is most often measured, and indeed this measure is the one saved in IMPDEF.H, the SI unit being\n\n\t\t____m3___\n\t\t[Y] = Pa . s\n\n+ \"SI-mho / The SI unit is equal to the cgs unit millimho x 100 or mho x 105\n",
                                            "items": {
                                              "type": "object",
                                              "title": "TympanogramTest_Type",
                                              "required": [
                                                "MeasurementCondition"
                                              ],
                                              "properties": {
                                                "CanalVolume": {
                                                  "type": "object",
                                                  "title": "Admittance_Type",
                                                  "properties": {
                                                    "Calculated": {
                                                      "type": "object",
                                                      "title": "Calculated",
                                                      "description": "The calculated value was first introduced in version 501.  When converting down it will be necessary to move the Y value to Measured > G AND then place a 0 (zero) in the B Element.  HIMSA has tried very hard not to use zero in this case since the migration to XSD based formats.  However, in this case, this is the only option and previous to format 501 the use off zero in B was commonly used to denote that the point was a calculated point.\n\nDocumentation suggests that AdmittanceValueCalculated OR CalculatedAdmittanceUnit will be used but not both. TBD.\n",
                                                      "properties": {
                                                        "AdmittanceValueCalculated": {
                                                          "type": "object",
                                                          "title": "AdmittanceValueCalculated_Type",
                                                          "description": "The Admittance Curve depicts the modulus recording of the admittance, i.e. the length of a complex value, calculated by using Pythagoras´ sentence. In this\nstructure, both the real and the imaginary part of the value or the value is saved, but for practical purposes, the admittance can be considered 90 degrees out of\nphase (real part approximately zero) at the Max. admittance point. This rule applies only for probe frequencies near 220 Hz e.g. 226 Hz.\n\nThe application saving the data which comes from an automated solution (gathering all data from the device) is assumed to save data via the Measured choice and provide the G and B values.  Y can later be caluculated by any applicaiton reading the data.\n\nOR\n\nIf the applicaiton (e.g. HIMSA's Audiogram module) provides a simple/manual method to record results it is assumed to use the Calculated choice\n\n\n@@ 500 to 501 name change\nadmittanceValueCalculated_Type to AdmittanceValueCalculated_Type\n",
                                                          "properties": {
                                                            "Y": {
                                                              "type": "number",
                                                              "format": "float",
                                                              "description": "The calculated value (Y)\n\nWhen saving data the calculated value is simply stored in this element.\n\nWhen reading a measured element the below formula can be used to obtain the calculated value.\n\nsquare root ((G x G) + (B x B))\n\nAcoustic admittance requires two numbers to specify its location in the complex plane, and is a vector which rotates in a circular manner tied to the probe frequency. In order to place the admittance values accurately a complex number is recorded which has a real and an imaginary element.\n\n@@ Convert DOWN Rules 501 to 500\n\nThis element is first introduced in format 501 so when converting down this value will need to be transfered to admittanceValue_Type > Argument1.  Read the conversion directions for the Element G.  Additionally, admittanceValue_Type >Argument2 will need to be given a value of 0\n\n@@\n",
                                                              "example": 1000
                                                            }
                                                          }
                                                        },
                                                        "CalculatedAdmittanceUnit": {
                                                          "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/ReflexTest/items/properties/ReflexCurve/properties/NumericalDelta/properties/CalculatedAdmittanceUnit"
                                                        }
                                                      }
                                                    },
                                                    "Measured": {
                                                      "type": "object",
                                                      "title": "Measured",
                                                      "description": "@@ Convert 501  500\nThe Measured element is new in 501\nWhen converting down the Measured values will be mapped to their respective Argumentadmittance1 and 2 values, see further down in this structure for more details\n@@\n\n\n@@ Convert UP from 500 to 501\n\nIF there is one point or value AND argument2 is set to 0 then it is possible to map Argument 1 to Y\n\nIf there is more than one point or value then argument1 will map to G and argument2 will map to B\n\n@@\n",
                                                      "properties": {
                                                        "AdmittancePointMeasured": {
                                                          "type": "object",
                                                          "title": "AdmittanceValueMeasured_Type",
                                                          "properties": {
                                                            "G": {
                                                              "type": "number",
                                                              "title": "G",
                                                              "format": "float",
                                                              "description": "Real part of the admittance value\n\nAcoustic admittance requires two numbers to specify its location in the complex plane, and is a vector which rotates in a circular manner tied to the probe frequency. In order to place the admittance values accurately a complex number is recorded which has a real and an imaginary element.\n\n@@ Convert DOWN Rules 501 to 500\n\nThis element was renamed to \"G\" from \"Argumentadmittance1\"\n\nIn format 500 this value is formatted depending on the unit_type.  Format 500 defined this element as an integer with a multiplier (a carryover from the C header format 100).  Format 501 defines this field as a decimal value so the converter will follow the below formula when the runtime converter is called.\n+ If CubicCentimeter is the unit then round up the value so that it has 2 decimal values, multiply by 100\n+ If MilliLiter is the unit then round up the value so that it has 2 decimal values, multiply by 100\n+ If MilliMho is the unit then round up the value so that it has 2 decimal values, multiply by 100\n+ If Degree is the unit then round up the value so that it has 1 decimal value, multiply by 10\n+ If DekaPascal then nothing needs to be done\nExample, if the unit is CubicCentimeter and the value is .895 the converted results will be 90 (.895 rounds up to .90 X 100 = 90)\n@@\n\n@@ Convert UP Rules 500 to 501\n+ If CubicCentimeter is the unit then divide the integer by 100\n+ If MilliLiter is the unit then divide the integer by 100\n+ If MilliMho is the unit then divide the integer by 100\n+ If Degree is the unit then divide the integer by 10\n+ If DekaPascal then nothing needs to be done\nExample, if the unit is CubicCentimeter and the value is 90 the converted result will be .90 (90/100)\n@@\n",
                                                              "example": 1000
                                                            },
                                                            "B": {
                                                              "type": "number",
                                                              "title": "B",
                                                              "format": "float",
                                                              "description": "Imaginary part of the admittance value\n\nAs the ear drum moves in and out from its resting state whilst responding to forces applied by the air pump during the admittance measurement it has in phase and out of phase motions. To accurately locate these movements on a admittance curve we are required to employ complex mathematical formula that include the imaginary number elements.\n\n@@ Convert DOWN Rules 501 to 500\n\nThis element was renamed to \"B\" from \"Argumentadmittance2\"\n\nIn format 500 this value is formatted depending on the unit_type.  Format 500 defined this element as an integer with a multiplier (a carryover from the C header format 100).  Format 501 defines this field as a decimal value so the converter will follow the below formula when the runtime converter is called.\n+ If CubicCentimeter is the unit then round up the value so that it has 2 decimal values, multiply by 100\n+ If MilliLiter is the unit then round up the value so that it has 2 decimal values, multiply by 100\n+ If MilliMho is the unit then round up the value so that it has 2 decimal values, multiply by 100\n+ If Degree is the unit then round up the value so that it has 1 decimal value, multiply by 10\n+ If DekaPascal then nothing needs to be done\nExample, if the unit is CubicCentimeter and the value is .895 the converted results will be 90 (.895 rounds up to .90 X 100 = 90)\n@@\n\n@@ Convert UP Rules 500 to 501\n+ If CubicCentimeter is the unit then divide the integer by 100\n+ If MilliLiter is the unit then divide the integer by 100\n+ If MilliMho is the unit then divide the integer by 100\n+ If Degree is the unit then divide the integer by 10\n+ If DekaPascal then nothing needs to be done\nExample, if the unit is CubicCentimeter and the value is 90 the converted result will be .90 (90/100)\n",
                                                              "example": 1000
                                                            }
                                                          }
                                                        },
                                                        "AdmittanceUnitMeasured": {
                                                          "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/ReflexTest/items/properties/ReflexCurve/properties/DeltaY/properties/MeasuredAdmittanceUnit"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "Gradient": {
                                                  "type": "object",
                                                  "title": "Gradient_Type",
                                                  "description": "Tympanogram Width/Gradient. The Gradient of the admittance Curve\n\n+ Gradient->GradientValue->ValueCalculated->Y for the value\n+ Width or Gradient is defined by GradientUnit->AdmittanceUnitCalculated->YUnit where:\n  Width\n  - mmho\n  - ml\n  - cc\n\n  Gradient\n  - daPa\n  - mmh20\n",
                                                  "properties": {
                                                    "GradientValue": {
                                                      "type": "object",
                                                      "title": "AdmittanceValue_Type",
                                                      "description": "The admittance Curve depicts the modulus of the admittance, i.e. the length of a complex value, calculated by using Pythagoras´ sentence. In this\nstructure, both the real and the imaginary part of the value is saved, but for practical purposes, the admittance can be considered 90 degrees out of\nphase (real part approximately zero) at the Max. admittance point. This rule applies only for probe frequencies near 220 Hz e.g. 226 Hz.\n\n@@ 500 to 501 name change\nadmittanceValue_Type to AdmittanceValue_Type\n@@\n",
                                                      "properties": {
                                                        "ValueCalculated": {
                                                          "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/TympanogramTest/items/properties/CanalVolume/properties/Calculated/properties/AdmittanceValueCalculated"
                                                        },
                                                        "Measured": {
                                                          "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/TympanogramTest/items/properties/CanalVolume/properties/Measured/properties/AdmittancePointMeasured"
                                                        }
                                                      }
                                                    },
                                                    "GradientUnit": {
                                                      "type": "object",
                                                      "title": "AdmittanceUnit_Type",
                                                      "description": "The Y-values of the admittance Curve can have different units (cc, ml, mmho..\netc), which depends of the instrument type.\n\n@@ Convert UP from 500 to 501\nWhen converting UP the ArgumentUnit1 value will map to admittanceUnitMeasured > G\nArgumentUnit2 will map to admittanceUnitMeasured > B\n@@\n\n@@ 500 to 501 name change\nadmittanceUnit_Type to AdmittanceUnit_Type\n@@\n",
                                                      "properties": {
                                                        "AdmittanceUnitCalculated": {
                                                          "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/ReflexTest/items/properties/ReflexCurve/properties/NumericalDelta/properties/CalculatedAdmittanceUnit"
                                                        },
                                                        "AdmittanceUnitMeasured": {
                                                          "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/ReflexTest/items/properties/ReflexCurve/properties/DeltaY/properties/MeasuredAdmittanceUnit"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "Pressure": {
                                                  "type": "integer",
                                                  "description": "Middle ear pressure at the point of maximum admittance",
                                                  "example": 100
                                                },
                                                "ResonanceFrequency": {
                                                  "type": "integer",
                                                  "description": "Defined as the frequency at which compliant and mass succeptance are equal. Normal middle ear resonance falls between 800 and 1200Hz. Below the resonant frequency the middle ear is stiffness controlled and above the resonant frequency it is mass controlled (Katz pg 189)\n\nVarious middle ear pathologies will have an effect on the mass or stiffness of the system resulting in altered resonant frequencies in abnormal ears.\n",
                                                  "example": 100
                                                },
                                                "Result": {
                                                  "type": "string",
                                                  "description": "Reference pg 177 Katz\n\nJerger 1970 classified the shapes of tympanograms and this system is still commonly used today and is applicable only to a 226Hz probe test.\n\n(A) tympanograms have peaks near atmospheric pressure\n(AD) tympanograms have a high peak near atmospheric pressure\n(As) tympanograms have a shallow peak near atmospheric pressure\n(B) tympanograms are flat\n(C) tympanograms have negative pressure peaks\n(D) and (E) tympanograms have a notched peak and are more common with higher probe frequencies.\nCouldNotSeal (CNS) / Could not seal, therefore no results obtained\nDidNotTest (DNT) /The stimulus was not presented to subject. Reasons: Per instruction by physician or because the test was judged to be unnecessary. No point was plotted.\nCouldNotTest (CNT)  / Unable to present stimulus. Reasons: Subject's physical or behavioral limitations, inability to obtain a seal. No point was plotted\nOther - Something other than listed above\n\n@@ 501 - 500 down conversion\n\nif CNS, DNT, or CNT or Other are used then it will not be possible to convert the complete tympogram test (TympanogramTest Element).  These choice represent that there was no test obtained, they provide more information why it was not obtained\n\n@@\n",
                                                  "enum": [
                                                    "A",
                                                    "AD",
                                                    "AS",
                                                    "B",
                                                    "C",
                                                    "D",
                                                    "E",
                                                    "CouldNotSeal",
                                                    "DidNotTest",
                                                    "CouldNotTest",
                                                    "Other"
                                                  ],
                                                  "example": "A"
                                                },
                                                "MeasurementCondition": {
                                                  "type": "object",
                                                  "title": "TympanogramMeasurementConditions_Type",
                                                  "description": "Measure Conditions (tymp)",
                                                  "properties": {
                                                    "SweepSpeed": {
                                                      "type": "integer",
                                                      "description": "Change in the pressure in which the curve is recorded. Measured and saved in\ndekaPascal per second (daPa/s).\n\n@@ This value has changed from mandatory to optional to help support manual entry of data where this information may not be known or supported to be recorded.  This change was made in format 501\n\n@@ Convert DOWN from 501 to 500\nThis element is mandatory in format 500.  When converting down enter a value of 0 (zero)\n@@\n",
                                                      "example": 100
                                                    },
                                                    "RecordMode": {
                                                      "type": "string",
                                                      "title": "RecordMode",
                                                      "description": "How is the admittance curve recorded, Compensated or Non Compensated.\n\nThe admittance equivalent to the Ear canal volume is conventionally subtracted\nfrom measures of total aural admittance to yield an estimate of the middle ear\nadmittance. This is referred to as compensated admittance.\n\nKatz pg 169\n",
                                                      "enum": [
                                                        "Compensated",
                                                        "NonCompensated"
                                                      ],
                                                      "example": "NonCompensated"
                                                    },
                                                    "ProbeFrequency": {
                                                      "type": "object",
                                                      "description": "Frequency of the probe tone\n\n@@ Convert down 501 --> 500\n\nThe ProbeFrequency element has been changed to the below structure, to support the ability to record that the frequency is essentially unknown\n\nConvert the 501 Frequency to  ProbeFrequency if the value is an integer\n\nIf the \"Other\" value has been chosen then enter zero in ProbeFrequency\n\n@@\n\n@@ Convert up 500 --> 501\n\nThe ProbeFrequency element has been changed to the below structure, to support the ability to record that the frequency is essentially unknown\n\nConvert the 500 ProbeFrequency to Frequency if the value is an integer\n\nIf the value is not present then add \"Other\" to the Other element\n\n@@\n",
                                                      "oneOf": [
                                                        {
                                                          "type": "object",
                                                          "properties": {
                                                            "Frequency": {
                                                              "type": "integer",
                                                              "title": "Frequency",
                                                              "default": 226,
                                                              "enum": [
                                                                226, 678, 1000
                                                              ],
                                                              "description": "The Frequency in Hz CHANGE THIS",
                                                              "example": 226
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "object",
                                                          "properties": {
                                                            "Other": {
                                                              "type": "string",
                                                              "title": "Other",
                                                              "default": "Other",
                                                              "description": "Used as an option to record that the frequency is \"other\" or unknown",
                                                              "example": "Other"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                },
                                                "StaticAdmittance": {
                                                  "type": "object",
                                                  "title": "StaticAdmittance_Type",
                                                  "description": "Also known as peak compensated static acoustic admittance. This is the height of the peak measured from the positive tail (typically +200daPa) to the peak. The term compensated means the admittance at the positive tail, which is used as an estimate of ear canal volume, has been removed from the measurement of peak height.\n",
                                                  "properties": {
                                                    "StaticAdmittanceValue": {
                                                      "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/TympanogramTest/items/properties/Gradient/properties/GradientValue"
                                                    },
                                                    "StaticAdmittanceUnit": {
                                                      "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/TympanogramTest/items/properties/Gradient/properties/GradientUnit"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "ReflexTest": {
                                            "type": "array",
                                            "title": "ReflexTests",
                                            "description": "Reflex Tests\n\nThe acoustic reflex is a contraction of two middle ear muscles, named the stapedius and tensor tympani muscles. The muscle contraction is a normal bilateral response to acoustic or other eliciting stimuli, (which is not necessarily bilateral). The amount of contraction and subsequent acoustic reflex decay are measured by immitance audiometry.\n\nThe reflex is commonly described as ipsilateral or contralateral depending on which side the response is observed relative to the stimulus.\n\nUsually manual inspection of the recorded response is required to verify that a reflex response has been recorded as normal breathing can cause artefact on the test recordings.\nGenerally there are 3 tests undertaken using the acoustic reflex response, which are:\n1) Normal reflex test\n2) Reflex decay test\n3) Reflex latency test\n\n\n1) Normal reflex test\nChanges in the immitance of the ear are monitored as a tonal or noise stimuli is presented which elicits an acoustic reflex. The test establishes the lowest sound level that elicits a reliable acoustic reflex response which is seen as a measurable change in acoustic immitance.\n\nAs the acoustic reflex is a bilateral response we can stimulate either ear and record a response from the same or opposite ear.\n\n The stimulus can be presented in the same ear as the immitance recording and this is called an ipsilateral reflex. Alternatively the immitance can be recorded in the opposite ear to the stimulus and this is called a contralateral reflex. Ipsilateral and contralateral reflexes test different neural pathways.\n\nFor clarity the definitions used are detailed below.\n\nContra Reflex Measurement (Right):\n+ Probe in: Right ear\n+ Stimuli in: Left ear\n+Reflex result are saved for: Right ear\n\nContra Reflex Measurement (Left):\n+Probe in: Left ear\n+Stimuli in: Right ear\n+Reflex result are saved for: Left ear\n\nIPSI Reflex Measurement (Right):\n+Probe in: Right ear\n+Stimuli in: Right ear\n+Reflex result are saved for: Right ear\n\nIPSI Reflex Measurement (Left):\n+Probe in: Left ear\n+Stimuli in: Left ear\n+Reflex result are saved for: Left ear\n\nRef: Pg 207 Katz\n\n\n2) Reflex Decay test\nAcoustic reflex decay or adaptation, is the reduction in the magnitude of the acoustic reflex response during the presentation of a sustained stimulus. (pg 220 Katz)\n\nTest frequencies tend to be 500Hz and 1000Hz as the reflex tends to naturally rapidly decay at high frequencies.\n\nA reflex is said to decay if it falls to 50% or less of its original value in the 10 or 30 second stimulus time.\n\nAbnormally rapid reflex decay is associated with retrocochlear hearing loss.\n\n\nThis curve illustrates the normal situation where the decay value is negative. The formula used for calculating the decay is\n\n\t\tY2 - Y1\n\t\t_______\n\tDecay = Y1 . 100\t\t percent. Range [0..100] percent.\n\n\n3) Reflex Latency test\nAcoustic reflex latency refers to how long it takes for the acoustic reflex to occur after the stimulus is presented. The delay is measured from the onset of the stimulus until the beginning of the reflex response. (pg 223 Katz). Generally taken as the time it takes after the stimulus is presented for the immitance change to rise to 10% of it’s eventual value.\n\nThe latency period tends to be substantially increased in retrocochlear hearing losses.\n",
                                            "items": {
                                              "type": "object",
                                              "title": "ReflexTest_Type",
                                              "properties": {
                                                "ReflexCurve": {
                                                  "type": "object",
                                                  "title": "ReflexCurve_Type",
                                                  "description": "Acoustic Reflex (stapedius reflex) measurement. The reflexPoints saves\n[time, admittance] values, and the admittance unit saves the unit of the data.\n",
                                                  "properties": {
                                                    "NumericalDelta": {
                                                      "type": "object",
                                                      "title": "NumericDelta",
                                                      "properties": {
                                                        "NumericDeltaYPoints": {
                                                          "type": "array",
                                                          "title": "NumericDeltaYPoints",
                                                          "items": {
                                                            "type": "object",
                                                            "title": "ReflexValuePointCalculated_Type",
                                                            "description": "The admittance Curve depicts the modulus recording of the admittance, i.e. the length of a complex value, calculated by using Pythagoras´ sentence. In this\nstructure, both the real and the imaginary part of the value or the value is saved, but for practical purposes, the admittance can be considered 90 degrees out of\nphase (real part approximately zero) at the Max. admittance point. This rule applies only for probe frequencies near 220 Hz e.g. 226 Hz.\n\nThe application saving the data which comes from an automated solution (gathering all data from the device) is assumed to save data via the Measured choice and provide the G and B values.  Y can later be caluculated by any applicaiton reading the data.\n\nOR\n\nIf the applicaiton (e.g. HIMSA's Audiogram module) provides a simple/manual method to record results it is assumed to use the Calculated choice\n",
                                                            "properties": {
                                                              "Pt": {
                                                                "type": "object",
                                                                "title": "AdmittanceValuePointCalculated_Type",
                                                                "properties": {
                                                                  "Time": {
                                                                    "type": "number",
                                                                    "format": "float",
                                                                    "description": "Time in seconds  X-Values of the point",
                                                                    "example": 1000
                                                                  },
                                                                  "NumericDeltaY": {
                                                                    "type": "number",
                                                                    "format": "float",
                                                                    "description": "The Delta Y'\n\n\n\n@@ Convert DOWN Rules 501 to 500\n\nFormat 500 restricted the number of points to be 128.  When converting down to format 500 the converter will simply take the first up to 128 points, the rest of the points will be dropped.\n\nThis element is first introduced in format 501 so when converting down this value will need to be transfer to admittanceValue_Type > Argument1.\n\nArgument2 will be zero\n\nIn format 500 this value is formatted depending on the unit_type.  Format 500 defined this element as an integer with a multiplier (a carryover from the C header format 100).  Format 501 defines this field as a decimal value so the converter will follow the below formula when the runtime converter is called.\n+ If CubicCentimeter is the unit then round up the value so that it has 2 decimal values, multiply by 100\n+ If MilliLiter is the unit then round up the value so that it has 2 decimal values, multiply by 100\n+ If MilliMho is the unit then round up the value so that it has 2 decimal values, multiply by 100\n+ If Degree is the unit then round up the value so that it has 1 decimal value, multiply by 10\n+ If DekaPascal then nothing needs to be done\nExample, if the unit is CubicCentimeter and the value is .895 the converted results will be 90 (.895 rounds up to .90 X 100 = 90)\n",
                                                                    "example": 1000
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "CalculatedAdmittanceUnit": {
                                                          "type": "object",
                                                          "title": "AdmittanceUnitCalculated_Type",
                                                          "description": "The Y-values of the admittance Curve can have different units (cc, ml, mmho..\netc), which depends of the instrument type.\n",
                                                          "properties": {
                                                            "YUnit": {
                                                              "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/ReflexTest/items/properties/ReflexCurve/properties/DeltaY/properties/MeasuredAdmittanceUnit/properties/Gunit"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "DeltaY": {
                                                      "type": "object",
                                                      "title": "DeltaY",
                                                      "description": "@@ Format 501 to 500\n\nIf an application (including the 501100 runtime converter)  wishes to make use of DeltaY it must then be converted  to NumericDelta following the below formula.\n\nNumericDeltaY = NumericY - NumericY0\n\nUsing the supplied DeltaG and DeltaB values the following variables will be used.\n\nB = DeltaB + B0\nG = DeltaG + G0\nNumericY = SQRT(B * B + G * G)\nNumericY0 = SQRT(B0 * B0 + G0 * G0)\n\nThen convert NumericDeltaY as documented to format 500\n@@\n",
                                                      "properties": {
                                                        "DeltaYPoints": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "title": "ReflexValuePointMeasured_Type",
                                                            "description": "The admittance Curve depicts the modulus recording of the admittance, i.e. the length of a complex value, calculated by using Pythagoras´ sentence. In this\nstructure, both the real and the imaginary part of the value or the value is saved, but for practical purposes, the admittance can be considered 90 degrees out of\nphase (real part approximately zero) at the Max. admittance point. This rule applies only for probe frequencies near 220 Hz e.g. 226 Hz.\n\nThe application saving the data which comes from an automated solution (gathering all data from the device) is assumed to save data via the Measured choice and provide the G and B values.  Y can later be caluculated by any applicaiton reading the data.\n\nOR\n\nIf the application (e.g. HIMSA's Audiogram module) provides a simple/manual method to record results it is assumed to use the Calculated choice\n",
                                                            "properties": {
                                                              "Time": {
                                                                "type": "number",
                                                                "format": "float",
                                                                "description": "Time in seconds  X-Values of the point",
                                                                "example": 1000
                                                              },
                                                              "DeltaG": {
                                                                "type": "number",
                                                                "format": "float",
                                                                "description": "Real part of the delta Y Point\n\n@@ Convert DOWN Rules 501 to 500\nThis value does not directly converter down to format 500, see conversion instructions under DeltaY\n@@\n",
                                                                "example": 1000
                                                              },
                                                              "DeltaB": {
                                                                "type": "number",
                                                                "format": "float",
                                                                "description": "Imaginary part of the delta Y Point\n\n@@ Convert DOWN Rules 501 to 500\nThis value does not directly converter down to format 500, see conversion instructions under DeltaY\n@@\n",
                                                                "example": 1000
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "G0": {
                                                          "type": "number",
                                                          "title": "G0",
                                                          "format": "float",
                                                          "example": 1000
                                                        },
                                                        "B0": {
                                                          "type": "number",
                                                          "title": "B0",
                                                          "format": "float",
                                                          "example": 1000
                                                        },
                                                        "MeasuredAdmittanceUnit": {
                                                          "type": "object",
                                                          "title": "AdmittanceUnitMeasured_Type",
                                                          "description": "Admittance can be recorded in different units such as cc, ml or mmho depending on the equipment used. This field denotes the units used in this measurement.\n\nGunit: Unit of the real part\nBunit: Unit of the Imaginary part\n",
                                                          "properties": {
                                                            "Gunit": {
                                                              "type": "string",
                                                              "title": "Unit_Type",
                                                              "enum": [
                                                                "CubicCentimeter",
                                                                "MilliLiter",
                                                                "MilliMho",
                                                                "Degree",
                                                                "DekaPascal"
                                                              ],
                                                              "description": "Attaches to a saved value and describes the unit used.\n\n+ cubicCentiMetre / In [IEC 60645-5 2005] is referred a rule of thumb\n\n+ milliLitre / The acoustic admittance of an air-filled cavity of volume 1 cubic cm at standard atmospheric conditions (barometric air pressure 100 kPa, temperature 20 degrees Celsius) is:\n\n+ MilliMho / This size is per definition 1 cgs acoustic millimho.\nSince 1 cubic cm is equal to 1 ml, the three admittance units therefore\nshould yield the same numeric values.\n\n+ Degree / If polar notation of the complex admittance is preferred, this measure expresses the phase angle.\n\n+ DekaPascal / Pressure in tens of Pascal, daPa, Pa/10. 1 daPa equals 1 mm of water.\n\n6/25/2012 Annotation\n\nThe IMP standard format 100 defined the possible values in the following manner\n•\tcubicCentiMetre_100 \t-- Cubic Centi Metre x 100\n•\tmilliLitre_100 \t\t-- Milli Litre x 100\n•\tmilli_mho\t\t-- Milli mho  x 100  i.e. \"SI-mho\"\n•\tdegree_3600\t\t-- Phase in degrees x 10\n•\tdeka_Pascal\t\t-- Pressure in deka Pascal (daPa or tens of Pa)\n\nThis means that a module saving data would set the admittance unit, using the list above, but would also have to save the admittance value accordingly.  For example, if the unit was cubiccenterMetre then the value would have to be X 100.  This concept was used as the original header file did not have the ability to use decimal values.\n\nWhile HIMSA migrated this standard (format 500) to XML we in almost all cases defined the xml element as a decimal where the format value was defined as “value”X100 ect.\n\nIn this case we are not able to make this similar type of change as value will in some cases by X100, X10, or nothing.\n\nIf a module is saving data using format 500 then it is mandatory that the developer save the value as an integer by multiplying the value according to the list of values above.\n\nConversely, a module reading data must divide the integer accordingly.\nEnd of 6/25/2012 Annotation\n\n@@ convert between 500 and 501\nPlease note that the enumerated cubicCentiMetre as changed to cubicCentiMeter\n@@\n",
                                                              "example": "DekaPascal"
                                                            },
                                                            "Bunit": {
                                                              "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/ReflexTest/items/properties/ReflexCurve/properties/DeltaY/properties/MeasuredAdmittanceUnit/properties/Gunit"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "ResultOfReflexTest": {
                                                  "type": "object",
                                                  "title": "ResultOfReflexTest_Type",
                                                  "properties": {
                                                    "ReflexDetected": {
                                                      "type": "boolean",
                                                      "description": "Indicates if the reflex was detected\n\n@@ 501 to 500 conversion\n\nIF TestType measurement condition IS NOT Decay or Latency then:\n\nMap True to 1 for ResultOfReflexTest\nMap False to 0 for ResultOfReflexTest\n\n@@\n\n@@ 500 to 501\n\nIF TestType measurement condition IS NOT Decay or Latency AND ResultOfReflex is 1 or 0 then:\nMap ResultOfReflex value of 1 to True\nMap ResultOfReflex value of 0 to False\n@@\n",
                                                      "example": true
                                                    },
                                                    "DecayBasicResult": {
                                                      "type": "string",
                                                      "title": "DecayBasicResult",
                                                      "description": "Positive if the results was positive for Decay\nNegative if the result was negative for Decay\n\nUse the element \"DecayPercent\" if a percent val;ue is to be stored.\n\n@@ 501 to 500 conversion\nThis is a new element but can be convereted down to 500\n\nIf value is Positive then map 1 to ResultOfReflexTest\nIf value is Negative then map 0 to ResultOfReflexTest\n\n@@\n\n@@ 500 to 501\n\nIf the TestType measurement condition = Decay AND the ResultOfReflex = 1 OR zero then\n\nIf ResultOfReflex = 1 then this element will be Positive\nIf ResultOfReflex = 0 then this element will be Negative\n\nIf the TestType measurement condition = Decay AND the ResultOfReflex IS NOT 1 OR zero then map the value to DecayPercent (see below)\n\n@@\n",
                                                      "enum": [
                                                        "Positive",
                                                        "Negative"
                                                      ],
                                                      "example": "Positive"
                                                    },
                                                    "DecayPercent": {
                                                      "type": "integer",
                                                      "title": "DecayPercent",
                                                      "description": "Decay value represented as percent\n\n@@ Format 501 to 500\nIf the TestType measurement condition = Decay then\nMap this element ResultOfReflex element\n@@\n\n@@ Format 500 to 501\nIf the TestType measurement condition = Decay AND the ResultOfReflex IS NOT 1 OR zero then map the ResultOfReflex value to this element\n@@\n",
                                                      "example": 100
                                                    },
                                                    "LatencyTime": {
                                                      "type": "integer",
                                                      "title": "LatencyTime",
                                                      "description": "time in milliseconds\n\n@@ Format 501 to Format 500\nIf the TestType measurement condition = Latency then\nMap this element ResultOfReflex element\n\n@@\n\n@@ Format 500 to 501\nIf the TestType measurement condition = Latency then map the ResultOfReflex value to this element\n@@\n",
                                                      "example": 100
                                                    }
                                                  }
                                                },
                                                "AdmittanceMeasurementCondition": {
                                                  "type": "object",
                                                  "title": "AdmittanceMeasurementCondition_Type",
                                                  "properties": {
                                                    "SignalLevel": {
                                                      "type": "object",
                                                      "title": "SignalLevel_Type",
                                                      "properties": {
                                                        "StimulusLevel": {
                                                          "type": "number",
                                                          "format": "float",
                                                          "description": "Level of the stimulus tone in dB HL. The ipsilateral stimulus tone is added via\nthe probe, the contralateral stimulus tone is added through a headphone, often a\nTDH39 that can easily be calibrated in dB HL (Hearing Level).\n",
                                                          "example": 1000
                                                        },
                                                        "Response": {
                                                          "type": "string",
                                                          "title": "ReflexTestResponse_Type",
                                                          "description": "Choices that can be recorded when a result is not obtained\n\n•\tNormal / Valid threshold point. Used for valid points at the threshold: For this threshold point, the tester or equipment detects a present reflex.\n•\tNoResponse (NR)  / Reflex not detected.  The stimulus was at the highest output level of the measurement device or at the highest intensity level allowed by clinical protocol, but no reflex was detected\n•\tCouldNotSeal (CNS) / Could not seal, therefore no results obtained\n•\tDidNotTest (DNT) /The stimulus was not presented to subject. Reasons: Per instruction by physician or because the test was judged to be unnecessary. No point was plotted.\n•\tCouldNotTest (CNT)  / Unable to present stimulus. Reasons: Subject's physical or behavioral limitations, inability to obtain a seal. No point was plotted.\n\nNo Response Safety (NR@): The professional stopped for safety reasons.  This is used to show that testing could have continued but was stopped.  NR@100, NR@105, NR@110, NR@115, NR@120\n",
                                                          "enum": [
                                                            "Normal",
                                                            "NoResponse",
                                                            "CouldNotSeal",
                                                            "DidNotTest",
                                                            "CouldNotTest",
                                                            "NR_at100",
                                                            "NR_at105",
                                                            "NR_at110",
                                                            "NR_at115",
                                                            "NR_at120"
                                                          ],
                                                          "example": "CouldNotTest"
                                                        }
                                                      }
                                                    },
                                                    "SignalType": {
                                                      "type": "string",
                                                      "title": "SignalType_Type",
                                                      "description": "+ pureTone / Sinus tone stimulus.\n+ multiTone  / Two sine waves simultaneously.\n+ narrowBandNoise / Band filtered noise, e.g. 1/3 or 1/1 octave band noise.\nbroadBandNoise This Signal Type is White Noise, i.e. noise with equal energy content for equal absolute bandwidths in Hz. An averaged FFT-analysis of white noise shows a flat spectrum.\n+ lowPassNoise / A noise signal produced by low pass filtering a BroadBandNoise.\n+ highPassNoise / A noise signal produced by high pass filtering a broadBandNoise.\n",
                                                      "enum": [
                                                        "PureTone",
                                                        "MultiTone",
                                                        "NarrowBandNoise",
                                                        "BroadBandNoise",
                                                        "LowPassNoise",
                                                        "HighPassNoise"
                                                      ],
                                                      "example": "HighPassNoise"
                                                    },
                                                    "SignalOutputType": {
                                                      "type": "string",
                                                      "title": "ReflexSignalOutput_Type",
                                                      "description": "TSignalOutput Reflex Stimulus Signal Output. The stimulus tone is measured in HL at (e.g. 3 different frequencies:\n\tIpsilateral [500 .. 4 kHz]\n\tContralateral [500 .. 8 kHz]\n\n+ ipsilateral / Stimulus tone provided through the probe tip at \"ipsi\" - the same side as the 226 Hz tone.\n+ contralateral / For the Contralateral stimulus (opposite side of the probe) is frequently used a TDH39 headphone calibrated in HL. The 8 kHz freq thus obtainable can often not be produced by the probe system.\n",
                                                      "enum": [
                                                        "Ipsilateral",
                                                        "Contralateral"
                                                      ],
                                                      "example": "Contralateral"
                                                    },
                                                    "Frequency": {
                                                      "type": "integer",
                                                      "title": "Frequency",
                                                      "description": "Stimulus tone frequency measured in Hertz.\nFor a fixed level tests this element would not be used if SignalOutput is set to PureTone or NarrowBandNoise\nFor Auto Threshold Search, sequence, multiplexed, or reflex tests this element would only be used if the SignalOutput is set to PureTone or NarrowBandNoise\nFor Latency or Decay tests this element would be used if SignalOutput is NarrowBandNoise the center frequency should be stated. !!\n",
                                                      "example": 100
                                                    },
                                                    "Pressure": {
                                                      "type": "integer",
                                                      "title": "Pressure",
                                                      "description": "Pressure applied through probe measured in deka Pascal\n@@ Format 501 - 500\nThis value was mandatory in format 500.  When converting down and not present then enter a 0\n@@\n",
                                                      "example": 100
                                                    },
                                                    "ProbeFrequency": {
                                                      "type": "integer",
                                                      "title": "ProbeFrequency",
                                                      "default": 226,
                                                      "enum": [
                                                        0, 226, 678, 1000
                                                      ],
                                                      "description": "The Frequency in Hz. 0 is OTHER.",
                                                      "example": 226
                                                    },
                                                    "TestType": {
                                                      "type": "string",
                                                      "title": "ReflexTestType_Type",
                                                      "description": "Different acoustic reflex measurements\n\n+ fixedLevel / Used at screening tests at e.g. 90 dB HL. The probe freq (226Hz) is always\nkept at 85 dB SPL. The stimulus tone is measured in HL at e.g. 3 different\nfrequencies: Contralateral [500 .. 8 kHz] Ipsilateral [500 .. 4 kHz]. For\ncontralateral stimulus is frequently used a TDH39 headphone calibrated in\nHL. The 8 kHz freq can often not be produced by the probe system.\n\n+ AutoThreshold Search / Sweep from e.g. 80 to 110 dB HL stimulus tone. Continuous increase in\nintensity over [2..5] seconds, the stapedius reflex is monitored continuously.\nA trained person must then decide from the band of curves when the reflex is\npresent. The probe frequency (226 Hz) is always kept at 85 dB SPL.\n\n+ sequence / A pre-programmed sequence of acoustic reflex tests. The probe freq (226\nHz) is always kept at 85 dB SPL, the stimulus tone intensity is varied in steps.\n\n+ multiplexed / Some methods prescribe that the probe tone and the stimulus tone is \"multiplexed\" - i.e. interchanged. The 226 Hz probe tone is used to find the max. admittance point, and then the stimulus tone is applied instead.\n\n+ reflex / A manually performed reflex test. All parameters are saved in the Measurement Conditions. The result is noted as TRUE or FALSE.\n\n+ decay / The decay percentage is measured after 10 seconds. See measurement details at explanation for TReflexTest\n\n+ latency / The latency in time before a 10 pct value of the acoustic reflex is obtained is measured and saved. See measurement details at explanation for TReflexTest.\n",
                                                      "enum": [
                                                        "FixedLevel",
                                                        "AutoThresholdSearch",
                                                        "Sequence",
                                                        "Multiplexed",
                                                        "Reflex",
                                                        "Decay",
                                                        "Latency"
                                                      ],
                                                      "example": "FixedLevel"
                                                    },
                                                    "CanalVolume": {
                                                      "$ref": "#/paths/~1clinical-tests~1%7BpatientId%7D/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/items/anyOf/2/items/properties/AcousticImmittanceAssessment/properties/TympanogramTest/items/properties/CanalVolume"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/contact/emails": {
      "get": {
        "summary": "List emails",
        "description": "Returns a list of all emails",
        "operationId": "emailIndex",
        "tags": ["Contact"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": true,
            "description": "Filters to apply to the Contact index",
            "schema": {
              "required": ["type"],
              "oneOf": [
                {
                  "required": ["uuid"]
                },
                {
                  "required": ["id"]
                }
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "The type of Contact",
                  "type": "string",
                  "enum": [
                    "patient",
                    "physician",
                    "location",
                    "staff",
                    "patient.emergencyContact"
                  ]
                },
                "uuid": {
                  "description": "Reference ID for external reference. UUIDv4",
                  "type": "string",
                  "format": "uuid",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a"
                },
                "id": {
                  "description": "The id of the Contact",
                  "type": "integer",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "archived": {
                  "description": "Include archived items",
                  "type": "string",
                  "example": "with",
                  "default": null,
                  "nullable": true,
                  "enum": ["with", "only"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Email Response Object",
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "A collection of emails",
                      "items": {
                        "type": "object",
                        "description": "An Email",
                        "allOf": [
                          {
                            "type": "object",
                            "description": "User editable fields for contact email",
                            "required": ["email"],
                            "properties": {
                              "email": {
                                "type": "string",
                                "format": "email",
                                "description": "Email address",
                                "example": "bob@example.com"
                              },
                              "primary": {
                                "description": "A boolean value that represents if the email is primary",
                                "type": "boolean",
                                "nullable": true,
                                "example": true
                              }
                            }
                          }
                        ]
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404",
            "description": "404 Filter Entity Not Found"
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/contact/addresses": {
      "get": {
        "summary": "List addresses",
        "description": "Returns a list of all addresses",
        "operationId": "addressIndex",
        "tags": ["Contact"],
        "parameters": [
          {
            "$ref": "#/paths/~1contact~1emails/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Address Response Object",
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "A collection of addresses",
                      "items": {
                        "type": "object",
                        "description": "An Address",
                        "allOf": [
                          {
                            "type": "object",
                            "description": "User editable fields for contact address",
                            "required": ["line1"],
                            "properties": {
                              "line1": {
                                "type": "string",
                                "description": "Address line 1",
                                "example": "440 Cambie Street",
                                "nullable": true
                              },
                              "line2": {
                                "type": "string",
                                "description": "Address line 2",
                                "example": "Unit 300",
                                "default": null,
                                "nullable": true
                              },
                              "line3": {
                                "type": "string",
                                "description": "Address line 3",
                                "default": null,
                                "nullable": true
                              },
                              "line4": {
                                "type": "string",
                                "description": "Address line 4",
                                "default": null,
                                "nullable": true
                              },
                              "city": {
                                "type": "string",
                                "description": "City of residence",
                                "example": "Vancouver",
                                "default": null,
                                "nullable": true
                              },
                              "zip": {
                                "type": "string",
                                "description": "Zip/Postal Code",
                                "example": "H5N6J7",
                                "nullable": true
                              },
                              "municipality": {
                                "type": "string",
                                "description": "Municipality as required",
                                "default": null,
                                "nullable": true
                              },
                              "primary": {
                                "description": "A boolean value that represents if the address is primary",
                                "type": "boolean",
                                "example": true
                              },
                              "note": {
                                "type": "string",
                                "description": "Notes about an address",
                                "example": "Snowbird",
                                "default": null,
                                "nullable": true
                              },
                              "startOccupancy": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 12,
                                "example": 3,
                                "description": "Month when they started occupancy at this residence",
                                "default": null,
                                "nullable": true
                              },
                              "endOccupancy": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 12,
                                "example": 7,
                                "description": "Month when they end occupancy at this residence",
                                "default": null,
                                "nullable": true
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "State for contact address",
                            "properties": {
                              "state": {
                                "description": "State/province/territory/subdivision response",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The state/province/territory/subdivision name",
                                    "example": "British Columbia"
                                  },
                                  "iso": {
                                    "type": "string",
                                    "description": "ISO code for the state, prefixed with the country ISO2",
                                    "example": "CA-BC"
                                  },
                                  "code": {
                                    "type": "string",
                                    "description": "The code used within the country for identifying a state",
                                    "example": "BC"
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "The name used for the type of subdivision",
                                    "example": "Province"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Country for contact address",
                            "properties": {
                              "country": {
                                "description": "Country name",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The country legal name",
                                    "example": "United Kingdom of Great Britain and Northern Ireland"
                                  },
                                  "shortName": {
                                    "type": "string",
                                    "description": "The country common name",
                                    "example": "United States"
                                  },
                                  "iso": {
                                    "type": "string",
                                    "description": "Two letter code representing the country",
                                    "example": "AU"
                                  },
                                  "iso3": {
                                    "type": "string",
                                    "description": "Three letter code representing the country",
                                    "example": "CAN"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404",
            "description": "404 Filter Entity Not Found"
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/contact/phones": {
      "get": {
        "summary": "List phones",
        "description": "Returns a list of all phone numbers",
        "operationId": "phoneIndex",
        "tags": ["Contact"],
        "parameters": [
          {
            "$ref": "#/paths/~1contact~1emails/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Phone Response Object",
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "A collection of phones",
                      "items": {
                        "type": "object",
                        "description": "A Phone Number",
                        "allOf": [
                          {
                            "type": "object",
                            "description": "User editable fields for contact phone",
                            "required": ["phoneNumber"],
                            "properties": {
                              "phoneNumber": {
                                "$ref": "#/paths/~1contact~1faxes/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/properties/phoneNumber"
                              },
                              "extension": {
                                "$ref": "#/paths/~1contact~1faxes/get/responses/200/content/application~1json/schema/properties/results/items/allOf/0/properties/extension"
                              },
                              "phoneType": {
                                "description": "A string value that represents the name of the contact type data. home, work, office etc.",
                                "type": "string",
                                "example": "work"
                              },
                              "primary": {
                                "description": "A boolean value that represents if the phone is primary",
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/contact/faxes": {
      "get": {
        "summary": "List faxes",
        "description": "Returns a list of all fax numbers",
        "operationId": "faxIndex",
        "tags": ["Contact"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": true,
            "description": "Filters to apply to the Contact index",
            "schema": {
              "required": ["type"],
              "oneOf": [
                {
                  "required": ["uuid"]
                },
                {
                  "required": ["id"]
                }
              ],
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["location"]
                },
                "uuid": {
                  "description": "Reference ID for external reference. UUIDv4",
                  "type": "string",
                  "format": "uuid",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a"
                },
                "id": {
                  "description": "The id of the Contact",
                  "type": "integer",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "archived": {
                  "description": "Include archived items",
                  "type": "string",
                  "example": "with",
                  "default": null,
                  "nullable": true,
                  "enum": ["with", "only"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Fax Response Object",
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "A collection of faxes",
                      "items": {
                        "type": "object",
                        "description": "A Phone Number",
                        "allOf": [
                          {
                            "type": "object",
                            "description": "User editable fields for contact fax",
                            "required": ["phoneNumber"],
                            "properties": {
                              "phoneNumber": {
                                "type": "object",
                                "description": "Phone number of the contact",
                                "properties": {
                                  "countryCode": {
                                    "type": "string",
                                    "description": "Country code of the phone number",
                                    "example": "1",
                                    "nullable": true
                                  },
                                  "areaCode": {
                                    "type": "string",
                                    "description": "Area code of the phone number",
                                    "example": "123",
                                    "nullable": true
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "description": "Phone number without the area code",
                                    "example": "123-4567",
                                    "nullable": true
                                  }
                                }
                              },
                              "extension": {
                                "type": "string",
                                "description": "Phone number extension, numeric part only",
                                "example": "01234",
                                "pattern": "^\\d*$",
                                "nullable": true
                              },
                              "faxType": {
                                "description": "A string value that represents the name of the contact type data. home, work, office etc.",
                                "type": "string",
                                "example": "work",
                                "nullable": true
                              },
                              "primary": {
                                "description": "A boolean value that represents if the phone is primary",
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404 Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1appointments/get/responses/422/content/application~1json/schema"
                }
              }
            }
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/equipment": {
      "get": {
        "summary": "List equipment",
        "description": "Returns a list of all equipment",
        "operationId": "equipmentIndex",
        "tags": ["Equipment"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": false,
            "description": "Filters to apply to the Equipment index",
            "schema": {
              "enum": ["id", "uuid", "archived"],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the Equipment",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "uuid": {
                  "description": "The uuid of the record. Can send multiple uuids in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a,qb40bcdb-54ab-4c66-af29-d46b3b5f123r"
                },
                "archived": {
                  "description": "Include archived items",
                  "type": "string",
                  "example": "with",
                  "default": null,
                  "nullable": true,
                  "enum": ["with", "only"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully index response",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "Multiple Equipment response",
                      "items": {
                        "$ref": "#/paths/~1equipment~1%7BequipmentUuid%7D/get/responses/200/content/application~1json/schema"
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/equipment/{equipmentUuid}": {
      "get": {
        "summary": "Show equipment",
        "description": "returns a single equipment",
        "operationId": "equipmentShow",
        "tags": ["Equipment"],
        "parameters": [
          {
            "name": "equipmentUuid",
            "in": "path",
            "style": "simple",
            "description": "The Equipment UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "allowEmptyValue": false,
              "example": "354b2beb-3c4e-4aa6-ace8-dbcf661ab46e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully single response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An Equipment",
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "nullable": false,
                      "required": ["uuid"],
                      "properties": {
                        "uuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference ID for equipment."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Fields for equipment",
                      "required": ["active"],
                      "properties": {
                        "name": {
                          "type": "string",
                          "format": "string",
                          "description": "Name of the equipment",
                          "example": "Acme Equipment Model Z",
                          "nullable": true
                        },
                        "equipmentDate": {
                          "type": "string",
                          "description": "The equipment date is the same as the delivery date",
                          "format": "date",
                          "example": "2020-10-10",
                          "nullable": true
                        },
                        "side": {
                          "type": "string",
                          "enum": ["left", "right"],
                          "nullable": true
                        },
                        "serial": {
                          "type": "string",
                          "example": "12345ABC",
                          "nullable": true
                        },
                        "active": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "nullable": false,
                      "required": ["patientUuid"],
                      "properties": {
                        "patientUuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference ID for patient."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          }
        }
      }
    },
    "/locations": {
      "get": {
        "summary": "List Locations",
        "description": "Returns a list of all Locations",
        "operationId": "locationIndex",
        "tags": ["Location"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": false,
            "description": "Filters to apply to the Location index",
            "schema": {
              "enum": ["id", "archived", "externalRefNumber", "customFlags"],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the Location",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "archived": {
                  "description": "Include archived items",
                  "type": "string",
                  "example": "with",
                  "default": null,
                  "nullable": true,
                  "enum": ["with", "only"]
                },
                "externalRefNumber": {
                  "description": "An external reference number for the location",
                  "example": "ABC1234",
                  "default": null,
                  "nullable": true,
                  "type": "string"
                },
                "customFlags": {
                  "description": "An array of custom flags on the location",
                  "example": {
                    "kronosStaffSchedulingEnabled": true
                  },
                  "default": null,
                  "nullable": true,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Location index response",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "Multiple Locations response",
                      "items": {
                        "$ref": "#/paths/~1locations~1%7BlocationUuid%7D/get/responses/200/content/application~1json/schema"
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationUuid}": {
      "get": {
        "summary": "Show Location",
        "description": "Returns a single Location",
        "operationId": "locationShow",
        "tags": ["Location"],
        "parameters": [
          {
            "name": "locationUuid",
            "in": "path",
            "style": "simple",
            "description": "The Location UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "allowEmptyValue": false,
              "example": "354b2beb-3c4e-4aa6-ace8-dbcf661ab46e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Location single response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A Location",
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "nullable": false,
                      "required": ["uuid"],
                      "properties": {
                        "uuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference UUID for Location"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Fields for Location",
                      "required": ["name"],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Location ID",
                          "example": 99,
                          "nullable": false
                        },
                        "name": {
                          "type": "string",
                          "format": "string",
                          "description": "Name of the Location",
                          "example": "ABC Location",
                          "nullable": false
                        },
                        "externalRefNumber": {
                          "type": "string",
                          "format": "string",
                          "description": "External reference is the five digit long number",
                          "example": 343434,
                          "nullable": true
                        },
                        "timezone": {
                          "type": "string",
                          "description": "Name of the Location",
                          "example": "America/Vancouver",
                          "nullable": false
                        },
                        "participationLevel": {
                          "type": "string",
                          "nullable": true
                        },
                        "customFlags": {
                          "type": "object",
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          }
        }
      }
    },
    "/patients": {
      "get": {
        "summary": "Retrieves a list of patient objects",
        "tags": ["Patient"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": false,
            "description": "Filters to apply to the Patient index",
            "schema": {
              "enum": [
                "id",
                "firstName",
                "middleName",
                "lastName",
                "patientUuid",
                "archived"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the patient",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "firstName": {
                  "description": "The first name of the patient",
                  "type": "string",
                  "example": "John",
                  "default": null,
                  "nullable": true,
                  "deprecated": true
                },
                "middleName": {
                  "description": "The middle name of the patient",
                  "type": "string",
                  "example": "Middle",
                  "default": null,
                  "nullable": true,
                  "deprecated": true
                },
                "lastName": {
                  "description": "The last name of the patient",
                  "type": "string",
                  "example": "Doe",
                  "default": null,
                  "nullable": true,
                  "deprecated": true
                },
                "uuid": {
                  "description": "The uuid of the record. Can send multiple uuids in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a,qb40bcdb-54ab-4c66-af29-d46b3b5f123r"
                },
                "archived": {
                  "description": "Include archived items",
                  "type": "string",
                  "example": "with",
                  "default": null,
                  "nullable": true,
                  "enum": ["with", "only"]
                },
                "name": {
                  "description": "A name of the patient, as a partial or full string. This will search across first middle or last name\nfields and return results for all the matches for each name segment. This is not a full text search for\ntne entire name.\n",
                  "type": "string",
                  "example": "John | Joh | Jo",
                  "nullable": true
                }
              }
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "How many results per page",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Patient object",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1patients~1%7BpatientUuid%7D/get/responses/200/content/application~1json/schema"
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patients/{patientUuid}": {
      "get": {
        "summary": "Retrieves a particular of patient object",
        "tags": ["Patient"],
        "parameters": [
          {
            "name": "patientUuid",
            "in": "path",
            "description": "Patient identifier for the url",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Patient object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "description": "An UUID reference for the patient",
                      "properties": {
                        "uuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference ID for patient"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "A Person's fillable fields",
                      "required": ["lastName"],
                      "properties": {
                        "firstName": {
                          "description": "First Name",
                          "type": "string",
                          "example": "Bruce",
                          "default": null,
                          "nullable": true
                        },
                        "middleName": {
                          "description": "Middle Name",
                          "type": "string",
                          "example": "Thomas",
                          "default": null,
                          "nullable": true
                        },
                        "lastName": {
                          "description": "Last Name",
                          "type": "string",
                          "example": "Wayne"
                        },
                        "title": {
                          "description": "The Person's courtesy title",
                          "type": "string",
                          "example": "Mr",
                          "default": null,
                          "nullable": true
                        },
                        "gender": {
                          "description": "Person's gender",
                          "type": "string",
                          "example": "Female",
                          "default": null,
                          "nullable": true
                        },
                        "suffix": {
                          "description": "The Person's generational designation",
                          "type": "string",
                          "example": "Junior",
                          "default": null,
                          "nullable": true
                        },
                        "professionalTitle": {
                          "description": "The Person's professional title",
                          "type": "string",
                          "example": "Esq",
                          "default": null,
                          "nullable": true
                        },
                        "preferredName": {
                          "description": "The Person's preferred name or nickname",
                          "type": "string",
                          "example": "Batman",
                          "default": null,
                          "nullable": true
                        },
                        "preferredLang": {
                          "description": "The Person's preferred language",
                          "type": "string",
                          "example": "en",
                          "default": null,
                          "nullable": true
                        },
                        "dateOfBirth": {
                          "description": "The Person's date of birth",
                          "type": "string",
                          "format": "date",
                          "example": "1915-04-17",
                          "default": null,
                          "nullable": true
                        },
                        "deceased": {
                          "description": "Is the Person deceased?",
                          "type": "boolean",
                          "example": true,
                          "default": false,
                          "nullable": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "A Patient's fillable fields",
                      "properties": {
                        "customerType": {
                          "type": "string",
                          "description": "The type of customer",
                          "enum": [
                            "Prospect",
                            "Current",
                            "Competitive",
                            "Other"
                          ],
                          "example": "Current"
                        },
                        "customerPhotograph": {
                          "type": "object",
                          "properties": {
                            "photoUrl": {
                              "type": "string",
                              "format": "uri",
                              "description": "A full path to the photo image if it exists",
                              "nullable": true
                            }
                          }
                        },
                        "preferredLocationUuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference ID for a clinic. UUIDv4",
                          "nullable": true
                        },
                        "preferredProviderUuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference ID for a provider. UUIDv4",
                          "nullable": true
                        },
                        "maritalStatus": {
                          "description": "Patient's marital status.",
                          "type": "string",
                          "example": "single",
                          "default": "other",
                          "nullable": true
                        },
                        "occupation": {
                          "type": "object",
                          "description": "Occupational information about a patient",
                          "required": ["employmentStatus", "studentStatus"],
                          "properties": {
                            "employmentStatus": {
                              "type": "string",
                              "description": "Patient's employment status.",
                              "example": "Full Time",
                              "default": "unknown",
                              "nullable": false
                            },
                            "employer": {
                              "type": "string",
                              "description": "Employed if employment status is full/part time",
                              "example": "Bobs Burgers and Brews",
                              "nullable": true
                            },
                            "occupation": {
                              "type": "string",
                              "description": "Patient's occupation title",
                              "example": "Head Burger Chef",
                              "nullable": true
                            },
                            "studentStatus": {
                              "type": "string",
                              "description": "Patient's student status.",
                              "example": "Part Time",
                              "default": "not_a_student",
                              "nullable": false
                            },
                            "school": {
                              "type": "string",
                              "description": "Name of School if student",
                              "example": "UCLA",
                              "nullable": true
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Responsible Party information about a patient",
                      "properties": {
                        "responsibleParty": {
                          "type": "object",
                          "nullable": true,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Related Contact's name",
                              "example": "John Smith",
                              "nullable": false
                            },
                            "relationship": {
                              "type": "string",
                              "description": "Related Contact's relationship to the patient",
                              "example": "Spouse",
                              "nullable": false
                            },
                            "addressUuid": {
                              "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                              "description": "Reference ID for the address of a Related Contact. UUIDv4",
                              "nullable": true
                            },
                            "phoneUuid": {
                              "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                              "description": "Reference ID for the phone of a Related Contact. UUIDv4",
                              "nullable": true
                            },
                            "emailUuid": {
                              "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                              "description": "Reference ID for the email of a Related Contact. UUIDv4",
                              "nullable": true
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Emergency Contact information about a patient",
                      "properties": {
                        "emergencyContact": {
                          "$ref": "#/paths/~1patients/get/responses/200/content/application~1json/schema/properties/results/items/allOf/3/properties/responsibleParty"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          }
        }
      }
    },
    "/physicians": {
      "get": {
        "summary": "Retrieves a list of physician objects",
        "tags": ["Physician"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": false,
            "description": "Filters to apply to the Physician index",
            "schema": {
              "enum": [
                "id",
                "archived",
                "firstName",
                "lastName",
                "name",
                "uuid",
                "location"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the Physician",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "archived": {
                  "description": "Include archived items",
                  "type": "string",
                  "example": "with",
                  "default": null,
                  "nullable": true,
                  "enum": ["with", "only"]
                },
                "firstName": {
                  "type": "string",
                  "description": "The physicians first name",
                  "example": "Curtis",
                  "deprecated": true
                },
                "lastName": {
                  "type": "string",
                  "description": "The phsyicians last name",
                  "example": "Connor",
                  "deprecated": true
                },
                "name": {
                  "description": "A name of the patient, as a partial or full string. This will search across first middle or last name\nfields and return results for all the matches for each name segment. This is not a full text search for\ntne entire name.\n",
                  "type": "string",
                  "example": "John | Joh | Jo",
                  "nullable": true
                },
                "uuid": {
                  "description": "The uuid of the record. Can send multiple uuids in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a,qb40bcdb-54ab-4c66-af29-d46b3b5f123r"
                },
                "location": {
                  "type": "integer",
                  "description": "A comma seperated list of location (clinic) ids to filter by.",
                  "example": "1,2"
                },
                "locationUuid": {
                  "description": "The uuid of the location (clinic). Can send multiple uuids in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a,qb40bcdb-54ab-4c66-af29-d46b3b5f123r"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Physician objects",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1physicians~1%7BphysicianUuid%7D/get/responses/200/content/application~1json/schema"
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/physicians/{physicianUuid}": {
      "get": {
        "summary": "Retrieves a particular of physician object",
        "tags": ["Physician"],
        "parameters": [
          {
            "name": "physicianUuid",
            "in": "path",
            "description": "Physician identifier for the url",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Physician object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "description": "An UUID reference for the physician",
                      "properties": {
                        "uuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference ID for physician"
                        }
                      }
                    },
                    {
                      "$ref": "#/paths/~1patients~1%7BpatientUuid%7D/get/responses/200/content/application~1json/schema/allOf/1"
                    },
                    {
                      "type": "object",
                      "description": "A Physician's fillable fields",
                      "properties": {
                        "practiceName": {
                          "type": "string",
                          "description": "Name of business or practice",
                          "example": "Arkham Asylum"
                        },
                        "physicianType": {
                          "description": "physician type",
                          "type": "string",
                          "nullable": true,
                          "enum": [
                            "audiologist",
                            "ent_otolaryngologists",
                            "speech_pathologist",
                            "other",
                            "general_practitioner",
                            "specialist"
                          ]
                        },
                        "clinicId": {
                          "type": "integer",
                          "description": "ID of the clinic",
                          "example": 1
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Retrieves a list of User objects",
        "description": "List of Users based on a filter",
        "operationId": "usersIndex",
        "tags": ["User"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": false,
            "description": "Filters to apply to the User index",
            "schema": {
              "enum": ["id", "name", "uuid", "archived"],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the User",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "name": {
                  "description": "The partial name of the User",
                  "type": "string",
                  "example": "John Doe | John | Doe",
                  "default": null,
                  "nullable": true
                },
                "uuid": {
                  "description": "The uuid of the record. Can send multiple uuids in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a,qb40bcdb-54ab-4c66-af29-d46b3b5f123r"
                },
                "archived": {
                  "description": "Include archived items",
                  "type": "string",
                  "example": "with",
                  "default": null,
                  "nullable": true,
                  "enum": ["with", "only"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of User object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Json API multiple resources",
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "Multiple responses",
                      "items": {
                        "$ref": "#/paths/~1users~1%7BuserUuid%7D/get/responses/200/content/application~1json/schema"
                      }
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "format": "uri",
                            "nullable": true,
                            "description": "URL of the page described",
                            "example": "/api/resource?page=1"
                          },
                          "label": {
                            "type": "string",
                            "description": "The name or index of the page described",
                            "example": "Previous"
                          },
                          "active": {
                            "type": "boolean",
                            "description": "Is this the current page"
                          }
                        }
                      },
                      "description": "Response links on index requests"
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer",
                          "description": "The current page in the data set",
                          "example": 3
                        },
                        "first_page_url": {
                          "type": "string",
                          "format": "uri",
                          "description": "The path to the first page of the API",
                          "example": "/api/resource?page=1"
                        },
                        "from": {
                          "type": "integer",
                          "description": "First item in this page of data",
                          "nullable": true,
                          "example": 31
                        },
                        "last_page": {
                          "type": "integer",
                          "description": "The last page in the data set",
                          "example": 6
                        },
                        "last_page_url": {
                          "type": "string",
                          "format": "uri",
                          "description": "The path to the last page of the API",
                          "example": "/api/resource?page=99"
                        },
                        "next_page_url": {
                          "type": "string",
                          "format": "uri",
                          "nullable": true,
                          "description": "The path to the next page of the API",
                          "example": "/api/resource?page=2"
                        },
                        "path": {
                          "type": "string",
                          "format": "uri",
                          "description": "The base path of the API",
                          "example": "/api/resource"
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Number of results per page",
                          "example": 15
                        },
                        "prev_page_url": {
                          "type": "string",
                          "format": "uri",
                          "nullable": true,
                          "description": "The path to the previous page of the API",
                          "example": "/api/resource?page=2"
                        },
                        "to": {
                          "type": "integer",
                          "description": "Last item in this page of data",
                          "nullable": true,
                          "example": 45
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of results available for all results",
                          "example": 80
                        }
                      },
                      "description": "Meta information about the paged data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userUuid}": {
      "get": {
        "summary": "Retrieves a particular of User object",
        "description": "Retrieves a User",
        "operationId": "usersShow",
        "tags": ["User"],
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "style": "simple",
            "description": "User identifier for the url",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "allowEmptyValue": false,
              "example": "12352beb-3c4e-4aa6-ace8-dbcf661ab46e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response fields for User",
                  "required": ["name"],
                  "allOf": [
                    {
                      "type": "object",
                      "description": "An UUID reference for the User",
                      "properties": {
                        "uuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference ID for User"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "A User's fillable fields",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The user name for the account",
                          "example": "John Doe",
                          "nullable": true
                        },
                        "authUuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Vault user uuid"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          }
        }
      }
    },
    "/appointments": {
      "get": {
        "summary": "List Appointments",
        "description": "Returns a list of all Appointments",
        "operationId": "appointmentIndex",
        "tags": ["Appointment"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": false,
            "description": "Filters to apply to the Appointment index. NOTE - Private Practice does NOT support archived filter",
            "schema": {
              "enum": [
                "id",
                "uuid",
                "staffUuid",
                "patientUuid",
                "patientId",
                "status",
                "archived"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the Appointment",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "uuid": {
                  "description": "The uuid of the record. Can send multiple uuids in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a,qb40bcdb-54ab-4c66-af29-d46b3b5f123r"
                },
                "patientId": {
                  "description": "The id of the Patient",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "patientUuid": {
                  "description": "The UUID of the Patient",
                  "type": "string",
                  "format": "uuid",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a",
                  "default": null,
                  "nullable": true
                },
                "staffUuid": {
                  "description": "The UUID of the Staff who conducted the appointment",
                  "type": "string",
                  "format": "uuid",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a",
                  "default": null,
                  "nullable": true
                },
                "status": {
                  "description": "The status of the appointment",
                  "type": "string",
                  "default": null,
                  "nullable": true,
                  "enum": [
                    "Completed",
                    "NotConfirmed",
                    "Confirmed",
                    "NoShow",
                    "LeftMessage",
                    "Cancelled",
                    "Rescheduled",
                    "NeedsManualConfirmation"
                  ]
                },
                "archived": {
                  "description": "Include archived items",
                  "type": "string",
                  "example": "with",
                  "default": null,
                  "nullable": true,
                  "enum": ["with", "only"]
                }
              }
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by ASC or DESC. You can use - if you want to have the default order sorted descendingly",
            "schema": {
              "type": "array",
              "items": {
                "enum": ["apptDate", "apptTime"],
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "$ref": "#/paths/~1patients/get/parameters/1"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Appointment index response",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "Multiple Appointments response",
                      "items": {
                        "$ref": "#/paths/~1appointments~1%7BappointmentUuid%7D/get/responses/200/content/application~1json/schema"
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "422 Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "This is the specific error message",
                              "default": "{error code}",
                              "example": "404 Not Found"
                            }
                          },
                          {
                            "type": "string",
                            "description": "This is the specific error message",
                            "default": "{error code}",
                            "example": "404 Not Found"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{appointmentUuid}": {
      "get": {
        "summary": "Show Appointment",
        "description": "Returns a single Appointment",
        "operationId": "appointmentShow",
        "tags": ["Appointment"],
        "parameters": [
          {
            "name": "appointmentUuid",
            "in": "path",
            "style": "simple",
            "description": "The Appointment UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "allowEmptyValue": false,
              "example": "354b2beb-3c4e-4aa6-ace8-dbcf661ab46e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Appointment single response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An Appointment",
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "nullable": false,
                      "required": ["uuid"],
                      "properties": {
                        "uuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference UUID for Appointment"
                        },
                        "startDateTime": {
                          "description": "Start DateTime for the appointment",
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-11-01T09:10:12+06:00"
                        },
                        "staffUuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference UUID for Staff who conducted the appointment",
                          "default": null,
                          "nullable": true
                        },
                        "locationUuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference UUID for Staff who conducted the appointment",
                          "default": null,
                          "nullable": true
                        },
                        "patientUuid": {
                          "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                          "description": "Reference UUID for Patient of the appointment",
                          "default": null,
                          "nullable": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          }
        }
      }
    },
    "/staff": {
      "get": {
        "summary": "List Staff",
        "description": "Returns a list of all Staff",
        "operationId": "staffIndex",
        "tags": ["Staff"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": false,
            "description": "Filters to apply to the Staff index",
            "schema": {
              "enum": [
                "id",
                "appointmentId",
                "userId",
                "userUuid",
                "uuid",
                "type",
                "locationUuid",
                "authUuid",
                "externalId",
                "archived",
                "firstName",
                "middleName",
                "lastName",
                "name",
                "has"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the Staff",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "appointmentId": {
                  "description": "The id of the Appointment",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "userId": {
                  "description": "The id of the User",
                  "type": "int",
                  "example": 1,
                  "default": null,
                  "nullable": true
                },
                "userUuid": {
                  "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                  "description": "The uuid of the User",
                  "default": null,
                  "nullable": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the Staff",
                  "enum": [
                    "Office Mgr",
                    "Owner",
                    "Telemarketer",
                    "Reception",
                    "Provider",
                    "Insurance Admin",
                    "Beltone Operator",
                    "Patient Care Coordinator"
                  ],
                  "example": "Owner",
                  "default": null,
                  "nullable": true
                },
                "locationUuid": {
                  "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                  "description": "The uuid of the Location. Can send multiple uuids in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a,qb40bcdb-54ab-4c66-af29-d46b3b5f123r"
                },
                "authUuid": {
                  "description": "The uuid of the Auth user. Can send multiple uuids in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a,qb40bcdb-54ab-4c66-af29-d46b3b5f123r"
                },
                "externalId": {
                  "description": "The external id of the user",
                  "type": "string",
                  "example": "abc123",
                  "default": null,
                  "nullable": true
                },
                "uuid": {
                  "description": "The uuid of the record. Can send multiple uuids in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a,qb40bcdb-54ab-4c66-af29-d46b3b5f123r"
                },
                "archived": {
                  "description": "Include archived items",
                  "type": "string",
                  "example": "with",
                  "default": null,
                  "nullable": true,
                  "enum": ["with", "only"]
                },
                "firstName": {
                  "description": "First Name (use name)",
                  "type": "string",
                  "example": "Bruce",
                  "default": null,
                  "nullable": true,
                  "deprecated": true
                },
                "middleName": {
                  "description": "Middle Name (use name)",
                  "type": "string",
                  "example": "Thomas",
                  "default": null,
                  "nullable": true,
                  "deprecated": true
                },
                "lastName": {
                  "description": "Last Name (use name)",
                  "type": "string",
                  "example": "Wayne",
                  "nullable": true,
                  "deprecated": true
                },
                "name": {
                  "description": "A name of the patient, as a partial or full string. This will search across first middle or last name\nfields and return results for all the matches for each name segment. This is not a full text search for\ntne entire name.\n",
                  "type": "string",
                  "example": "John | Joh | Jo",
                  "nullable": true
                },
                "has": {
                  "description": "The field name which must contain a value. Can send multiple fields in a comma separated string",
                  "default": null,
                  "nullable": true,
                  "style": "form",
                  "explode": false,
                  "type": "string",
                  "example": "authExternalId,someOtherField"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "How many results per page",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 15
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Staff index response",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "Multiple Staff response",
                      "items": {
                        "$ref": "#/paths/~1staff~1%7BstaffUuid%7D/get/responses/200/content/application~1json/schema"
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/staff/{staffUuid}": {
      "get": {
        "summary": "Show Staff",
        "description": "Returns a single Staff",
        "operationId": "staffShow",
        "tags": ["Staff"],
        "parameters": [
          {
            "name": "staffUuid",
            "in": "path",
            "style": "simple",
            "description": "The Staff UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "allowEmptyValue": false,
              "example": "354b2beb-3c4e-4aa6-ace8-dbcf661ab46e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Staff single response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A Staff",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "nullable": false
                    },
                    "uuid": {
                      "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                      "description": "Reference UUID for Staff"
                    },
                    "userUuid": {
                      "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                      "description": "Reference UUID for Company User",
                      "nullable": true
                    },
                    "authUuid": {
                      "$ref": "#/paths/~1contact~1faxes/get/parameters/0/schema/properties/uuid",
                      "description": "Reference UUID for Vault User",
                      "nullable": true
                    },
                    "authExternalId": {
                      "type": "string",
                      "description": "The Costco User external_id",
                      "example": "example/01/03",
                      "nullable": true
                    },
                    "defaultLocationUuid": {
                      "type": "string",
                      "format": "uuid",
                      "example": "2e40bcdb-54ab-4c66-af29-d46b3b5f553a",
                      "description": "Default location UUID for Staff",
                      "nullable": true
                    },
                    "locationUuids": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid",
                        "example": [
                          "2e40bcdb-54ab-4c66-af29-d46b3b5f553a",
                          "3e40bcdb-54ab-4c66-af29-d46b3b5f553a"
                        ],
                        "description": "All location UUIDs that the Staff belongs to"
                      }
                    },
                    "language": {
                      "type": "string",
                      "description": "The preferred language of the Staff",
                      "example": "en_US",
                      "nullable": true
                    },
                    "firstName": {
                      "type": "string",
                      "description": "The first name of the Staff",
                      "example": "John",
                      "nullable": true
                    },
                    "middleName": {
                      "type": "string",
                      "description": "The middle name of the Staff",
                      "example": "Middle",
                      "nullable": true
                    },
                    "lastName": {
                      "type": "string",
                      "description": "The last name of the Staff",
                      "example": "Doe",
                      "nullable": true
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the Staff",
                      "example": "Mr.",
                      "nullable": true
                    },
                    "suffix": {
                      "type": "string",
                      "description": "The suffix of the Staff",
                      "example": "Au. D.",
                      "nullable": true
                    },
                    "staffType": {
                      "$ref": "#/paths/~1staff/get/parameters/0/schema/properties/type"
                    },
                    "npi": {
                      "type": "string",
                      "description": "The npi of the Staff",
                      "example": 123,
                      "nullable": true
                    },
                    "idQualifier": {
                      "type": "object",
                      "description": "The ID Qualifier of the Staff",
                      "nullable": true,
                      "properties": {
                        "idQualifierType": {
                          "type": "string",
                          "description": "The ID Qualifier Type of the Staff",
                          "example": "abc",
                          "nullable": true
                        },
                        "idQualifierNumber": {
                          "type": "string",
                          "description": "The ID Qualifier Number of the Staff",
                          "example": "abc123",
                          "nullable": true
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          }
        }
      }
    },
    "/settings/parent-company": {
      "get": {
        "summary": "List Parent Company Setting Values",
        "description": "Returns a list of setting values for a parent company",
        "operationId": "parentCompanySettingIndex",
        "tags": ["Setting"],
        "parameters": [
          {
            "in": "query",
            "style": "deepObject",
            "explode": true,
            "name": "filter",
            "required": true,
            "description": "Filters to apply to the Setting index",
            "schema": {
              "enum": ["settingKey"],
              "required": ["settingKey"],
              "type": "object",
              "properties": {
                "settingKey": {
                  "description": "The key of the Setting, You can provide multiple comma delimited keys",
                  "type": "string",
                  "style": "form",
                  "explode": false,
                  "example": "efax_enabled,bundles",
                  "nullable": false
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Setting Value Response Object",
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "A collection of setting values",
                      "items": {
                        "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema"
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/settings/parent-company/{settingKey}": {
      "get": {
        "summary": "Show Parent Company Setting Value",
        "description": "Returns a single setting value for a parent company",
        "operationId": "parentCompanySettingShow",
        "tags": ["Setting"],
        "parameters": [
          {
            "name": "settingKey",
            "in": "path",
            "style": "simple",
            "description": "The key of the Setting",
            "required": true,
            "schema": {
              "type": "string",
              "allowEmptyValue": false,
              "example": "efax_enabled"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Setting value single response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A Setting value",
                  "properties": {
                    "level": {
                      "description": "The level of the Setting",
                      "type": "string",
                      "enum": ["parentCompany", "location"],
                      "example": "location"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the Setting",
                      "example": "Efax Enabled"
                    },
                    "key": {
                      "type": "string",
                      "description": "The key of the Setting",
                      "example": "efax_enabled"
                    },
                    "value": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string",
                          "format": "date-time"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "$ref": "#/paths/~1settings~1info~1%7BsettingLevel%7D~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/options/items"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/paths/~1settings~1info~1%7BsettingLevel%7D~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/options/items"
                          }
                        }
                      ],
                      "description": "The value of the Setting",
                      "example": true,
                      "nullable": true
                    },
                    "type": {
                      "description": "The type of the Setting",
                      "type": "string",
                      "enum": [
                        "boolean",
                        "date",
                        "int",
                        "multiOption",
                        "option",
                        "string"
                      ],
                      "example": "string"
                    },
                    "isDefault": {
                      "type": "boolean",
                      "description": "True if the entity hasn't set their own value",
                      "example": true
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2023-11-01T09:10:12+06:00",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/settings/location/{locationUuid}": {
      "get": {
        "summary": "List Location Setting Values",
        "description": "Returns a list of setting values for a location",
        "operationId": "locationSettingIndex",
        "tags": ["Setting"],
        "parameters": [
          {
            "name": "locationUuid",
            "in": "path",
            "style": "simple",
            "description": "The Location UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "allowEmptyValue": false,
              "example": "354b2beb-3c4e-4aa6-ace8-dbcf661ab46e"
            }
          },
          {
            "$ref": "#/paths/~1settings~1parent-company/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/paths/~1settings~1parent-company/get/responses/200"
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/settings/location/{locationUuid}/{settingKey}": {
      "get": {
        "summary": "Show Location Setting Value",
        "description": "Returns a single setting value for a location",
        "operationId": "locationSettingShow",
        "tags": ["Setting"],
        "parameters": [
          {
            "$ref": "#/paths/~1settings~1location~1%7BlocationUuid%7D/get/parameters/0"
          },
          {
            "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/responses/200"
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/settings/info/{settingLevel}/{settingKey}": {
      "get": {
        "summary": "Show Setting Info",
        "description": "Returns a single setting",
        "operationId": "settingShow",
        "tags": ["Setting"],
        "parameters": [
          {
            "$ref": "#/paths/~1settings~1%7BsettingLevel%7D~1list/get/parameters/0"
          },
          {
            "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Setting single response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A Setting Information for a Setting Key",
                  "properties": {
                    "level": {
                      "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/level",
                      "description": "The level of the Setting"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the Setting",
                      "example": "Efax Enabled"
                    },
                    "key": {
                      "type": "string",
                      "description": "The key of the Setting",
                      "example": "efax_enabled"
                    },
                    "defaultValue": {
                      "anyOf": [
                        {
                          "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/value/anyOf/0"
                        },
                        {
                          "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/value/anyOf/1"
                        },
                        {
                          "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/value/anyOf/2"
                        },
                        {
                          "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/value/anyOf/3"
                        },
                        {
                          "$ref": "#/paths/~1settings~1info~1%7BsettingLevel%7D~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/options/items"
                        },
                        {
                          "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/value/anyOf/5"
                        }
                      ],
                      "description": "The value of the Setting",
                      "example": true,
                      "nullable": true
                    },
                    "type": {
                      "$ref": "#/paths/~1settings~1parent-company~1%7BsettingKey%7D/get/responses/200/content/application~1json/schema/properties/type",
                      "description": "The type of the Setting"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the Option",
                            "example": "Preferred Provider"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the Option",
                            "example": "preferred_provider"
                          }
                        }
                      },
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    },
    "/settings/{settingLevel}/list": {
      "get": {
        "summary": "Show Setting List",
        "description": "Returns all the settings",
        "operationId": "settingIndex",
        "tags": ["Setting"],
        "parameters": [
          {
            "name": "settingLevel",
            "in": "path",
            "style": "simple",
            "description": "The level of the Setting",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["parent-company", "location"],
              "allowEmptyValue": false
            },
            "example": "location"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Setting key list response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A list of Setting Keys Response Object",
                  "required": ["results"],
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "A collection of setting keys",
                      "items": {
                        "type": "object",
                        "description": "A Setting key",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the Setting",
                            "example": "Efax Enabled"
                          },
                          "key": {
                            "type": "string",
                            "description": "The key of the Setting",
                            "example": "efax_enabled"
                          }
                        }
                      }
                    },
                    "links": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/links"
                    },
                    "meta": {
                      "$ref": "#/paths/~1users/get/responses/200/content/application~1json/schema/properties/meta"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/paths/~1contact~1faxes/get/responses/404"
          },
          "422": {
            "$ref": "#/paths/~1appointments/get/responses/422"
          }
        }
      }
    }
  }
}
